<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git 和 Github 的基本使用</title>
    <url>/2021/03/15/Git%E5%92%8CGithub%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Git和Github的概念"><a href="#Git和Github的概念" class="headerlink" title="Git和Github的概念:"></a><strong>Git 和 Github 的概念:</strong></h1><p>　　Git 是分布式版本管理系统，简单说就是一个软件，用于记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的软件。</p>
<p>　　Github 是一个为用户提供 Git 服务的网站，简单说就是一个可以放代码或文件的地方，Github 除了提供管理 Git 的 web 界面外，还提供订阅，关注，讨论组，在线编辑器等丰富功能。</p>
<h1 id="Git本地仓库操作"><a href="#Git本地仓库操作" class="headerlink" title="Git本地仓库操作:"></a><strong>Git 本地仓库操作:</strong></h1><h2 id="1-首次使用需进行全局配置"><a href="#1-首次使用需进行全局配置" class="headerlink" title="1.首次使用需进行全局配置:"></a>1. 首次使用需进行全局配置:</h2><p>　　　　配置用户名：<code>git config --global user.name "用户名"</code>;</p>
<p>　　　　配置用户邮箱：<code>git config --global user.email "邮箱"</code>;(这里使用 Github 的用户名和邮箱)</p>
<h2 id="2-创建项目目录，并进入该目录"><a href="#2-创建项目目录，并进入该目录" class="headerlink" title="2.创建项目目录，并进入该目录"></a>2. 创建项目目录，并进入该目录</h2><h2 id="3-该目录下右键Git-Brash-Here进入命令行（Git-brash-Gui可以实现命令行功能）"><a href="#3-该目录下右键Git-Brash-Here进入命令行（Git-brash-Gui可以实现命令行功能）" class="headerlink" title="3.该目录下右键Git Brash Here进入命令行（Git brash Gui可以实现命令行功能）"></a>3. 该目录下右键 Git Brash Here 进入命令行（<strong>Git brash Gui 可以实现命令行功能</strong>）</h2><ul>
<li><p><strong>git init，</strong>初始化</p>
</li>
<li><p><strong>git status</strong>，查询当前工作区所有文件的状态</p>
</li>
<li><p><strong>git add</strong>，添加文件到缓存区</p>
</li>
<li><p><strong>git commit -m “注释内容”</strong> ，提交至版本库</p>
</li>
<li><p><strong>git log</strong>，或 <strong>git log –pretty=oneline</strong>，查看提交的版本，<strong>黄色为版本号（commit id），回退时可不用写全，git 会自动识别</strong></p>
</li>
<li><p><strong>git reset –hard 版本号</strong> ，回到过去或未来</p>
</li>
<li><p><strong>git reflog</strong>，查看未来。git log 看不到未来</p>
</li>
</ul>
<p>（1）<strong>git init，</strong>初始化</p>
<p><img data-src="https://i.loli.net/2021/03/15/kZGdlCYIAv21Xht.png" alt="image-20210315164311428"></p>
<p>（2）<strong>git status</strong>，查询当前工作区所有文件的状态；</p>
<p><img data-src="https://i.loli.net/2021/03/15/LARwrtk5MUbmeZT.png" alt="image-20210315164400982"></p>
<p>（3）新建或复制需要管理的文件</p>
<p>（4）<strong>git add</strong>，添加文件到缓存区</p>
<p>四种方式：</p>
<p>语法 1：git add 文件名</p>
<p>语法 2：git add 文件 1 文件名 2 文件名 3….</p>
<p>语法 3:git add .  【添加当前目录到缓存区】</p>
<p>语法 3:git add -A 【添加当前目录到缓存区】</p>
<p><img data-src="https://i.loli.net/2021/03/15/4xwObtEM1uHKzW9.png" alt="image-20210315170246829"></p>
<p>（5）git status，查询当前工作区所有文件的状态；</p>
<p><img data-src="https://i.loli.net/2021/03/15/gwOqHiYWdn7lc2f.png" alt="image-20210315170623299"></p>
<p>（6）<strong>git commit -m “注释内容”</strong> ，提交至版本库</p>
<p><img data-src="https://i.loli.net/2021/03/15/H8GZKVxNprnuiod.png" alt="image-20210315170749964"></p>
<p>（7）修改文件或增加文件，git add -A，git status，git commit</p>
<p><img data-src="https://i.loli.net/2021/03/15/TY3ha7qk9btomiv.png" alt="image-20210315171333600"></p>
<p>（8）<strong>git log</strong>，或 <strong>git log –pretty=oneline</strong>，查看提交的版本，<strong>黄色为版本号（commit id），回退时可不用写全，git 会自动识别</strong></p>
<p><img data-src="https://i.loli.net/2021/03/15/tMlpXFkxr9VnN47.png" alt="image-20210315172303235"></p>
<p>（9）<strong>git reset –hard 版本号</strong> ，回到过去，此时新增文件没有了或修改复原了</p>
<p><img data-src="https://i.loli.net/2021/03/15/WGkrj5VMLTCq9t1.png" alt="image-20210315172755420"></p>
<p>（10）<strong>git reflog</strong>，查看未来。此时 git log 看不到未来</p>
<p><img data-src="https://i.loli.net/2021/03/15/95ueLWE2B7bsgKl.png" alt="image-20210315173341816"></p>
<p>（11）<strong>git reset –hard 版本号</strong> ，回到未来，此时又回到未来状态</p>
<p><img data-src="https://i.loli.net/2021/03/15/t9Eidq3IfCl4wL2.png" alt="image-20210315174010967"></p>
<h1 id="Github远程仓库操作（首先建立仓库）"><a href="#Github远程仓库操作（首先建立仓库）" class="headerlink" title="Github远程仓库操作（首先建立仓库）"></a><strong>Github 远程仓库操作</strong>（首先建立仓库）</h1><h2 id="远程仓库克隆到本地"><a href="#远程仓库克隆到本地" class="headerlink" title="远程仓库克隆到本地"></a>远程仓库克隆到本地</h2><p>远程新建仓库或远程已有仓库 clone 到本地，本地库与远程库已建立连接。进行系列操作，进行版本管理。</p>
<p>三个操作工具：Git brush Here 或 Git brash Gui 或 Github Desktop</p>
<h3 id="本地无需建仓库的克隆："><a href="#本地无需建仓库的克隆：" class="headerlink" title="本地无需建仓库的克隆："></a>本地无需建仓库的克隆：</h3><h4 id="Github-Desktop克隆可采取URL方式"><a href="#Github-Desktop克隆可采取URL方式" class="headerlink" title="Github Desktop克隆可采取URL方式"></a>Github Desktop 克隆可采取 URL 方式</h4><p>Github 网页在对应的仓库用 GitHubDesktop 打开，本地无需新建目录，但要指定目录。</p>
<img data-src="https://i.loli.net/2021/03/16/tzZVCgXLd1xbJ9y.png" alt="image-20210316172929240" style="zoom:80%;">



<p><img data-src="https://i.loli.net/2021/03/16/Dae78RVjdtrCSK3.png" alt="image-20210316171821793"></p>
<p>或（没成功，再试）</p>
<p><img data-src="https://i.loli.net/2021/03/16/qdBPLFf1SvcKjXT.png" alt="image-20210316173753886"></p>
<p>https 验证下，用户和密码记录在 windows 凭据中，</p>
<ul>
<li>GitHub - <a href="https://api.github.com/netxulei%E8%AE%B0%E5%BD%95Githup">https://api.github.com/netxulei 记录 Githup</a> Desktop 操作时录入的用户名和密码</li>
<li> git:<a href="https://github.com记录git/">https://github.com 记录 Git</a> Brush Gui 或 Git brash Here 操作时录入的用户名和密码</li>
<li> Git brush Here 或 Git brash Gui 或 Github Desktop 操作与远程库相关内容时，若没有提示录入界面，且错误时，可以删除上述凭据，重新操作。</li>
</ul>
<p>控制面板→凭据管理器→windows 凭据</p>
<p><img data-src="https://i.loli.net/2021/03/16/Nmi7KC4dPMnVIxS.png" alt="image-20210316170517209"></p>
<p>网络问题可多次克隆</p>
<p>Git brush Here 或 Git brash Gui</p>
<h2 id="一、本地库与远程库连接"><a href="#一、本地库与远程库连接" class="headerlink" title="一、本地库与远程库连接"></a>一、本地库与远程库连接</h2><p> git remote add origin2 <a href="mailto:git@github.com">git@github.com</a>:tianqixin/runoob-git-test.git，添加远程库，origin 为别名</p>
<p> git fetch origin main ，拉到本地， origin 的远程上拉取名为 master 的分支到本地分支 origin/main 中</p>
<p>git push [alias] [branch]，推送到远程库</p>
<p>git remote -v，显示远程连接仓库</p>
<p>解除 ssl 验证，push 时会自动出现 http 方式的验证：    </p>
<p>git config –global http.sslVerify “false”</p>
<h2 id="二、远程库clone到本地"><a href="#二、远程库clone到本地" class="headerlink" title="二、远程库clone到本地"></a>二、远程库 clone 到本地</h2>]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>gtihub</tag>
      </tags>
  </entry>
  <entry>
    <title>Github+Node.js+Hexo+NexT 博客的环境恢复</title>
    <url>/2021/03/15/Github+Node.js+Hexo+NexT%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%8E%AF%E5%A2%83%E6%81%A2%E5%A4%8D/</url>
    <content><![CDATA[<h1 id="博客生成系统数据"><a href="#博客生成系统数据" class="headerlink" title="博客生成系统数据"></a>博客生成系统数据</h1><p>Github+Node.js+Hexo+NexT 博客建立后，github 仅保存了生成的博客网页，原始博客生成系统未保存，可有两种备份方式</p>
<p>一是原有本地博客目录复制备份；二是 git 备份或版本管理（先建立，再博客或一博客再变成可 git 的目录？）</p>
<h1 id="博客生成环境恢复"><a href="#博客生成环境恢复" class="headerlink" title="博客生成环境恢复"></a>博客生成环境恢复</h1><p>重新安装系统或更换电脑后，环境的恢复</p>
<h5 id="一、按照顺序安装git→配置git→安装NVM→安装node-js→安装Hexo"><a href="#一、按照顺序安装git→配置git→安装NVM→安装node-js→安装Hexo" class="headerlink" title="一、按照顺序安装git→配置git→安装NVM→安装node.js→安装Hexo"></a>一、按照顺序安装 git→配置 git→安装 NVM→安装 node.js→安装 Hexo</h5><ul>
<li>因为博客主题是安装在博客目录中，主题无需另外安装和配置</li>
</ul>
<h5 id="二、恢复备份的目录或clone-github中的内容"><a href="#二、恢复备份的目录或clone-github中的内容" class="headerlink" title="二、恢复备份的目录或clone github中的内容"></a>二、恢复备份的目录或 clone github 中的内容</h5><h5 id="三、以后继续hexo-new-博客；hexo-g；hexo-d正常操作即可"><a href="#三、以后继续hexo-new-博客；hexo-g；hexo-d正常操作即可" class="headerlink" title="三、以后继续hexo new 博客；hexo g；hexo d正常操作即可"></a>三、以后继续 hexo new 博客；hexo g；hexo d 正常操作即可</h5><h5 id="四、注意事项"><a href="#四、注意事项" class="headerlink" title="四、注意事项"></a>四、注意事项</h5><h6 id="gitd的全局配置"><a href="#gitd的全局配置" class="headerlink" title="gitd的全局配置"></a>gitd 的全局配置</h6><p>配置好全局用户名、邮件和密码或其他验证方式即可进行正常的博客（github 的 https 协议，密码验证方式下）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">git config --global user.name netxulei</span><br><span class="line">git config --global user.email netxulei@outlook.com</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>当前用户目录下生成或更改.gitconfig 文件，内容为：</li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[filter "lfs"]</span><br><span class="line">  smudge = git-lfs smudge -- %f</span><br><span class="line">  process = git-lfs filter-process</span><br><span class="line">  required = true</span><br><span class="line">  clean = git-lfs clean -- %f</span><br><span class="line">[user]</span><br><span class="line">  name = netxulei</span><br><span class="line">  email = netxulei@outlook.com</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>git config 实际上可为任何数据，只不过 git 需要 name 和 email，如下 </li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">git config --global test.first haha</span><br></pre></td></tr></tbody></table></figure>
<p>会在.gitconfig 中增加</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[test]</span><br><span class="line">  first = haha</span><br></pre></td></tr></tbody></table></figure>
<h6 id="上传github的验证"><a href="#上传github的验证" class="headerlink" title="上传github的验证"></a>上传 github 的验证</h6><p>密码验证方式下，第一次执行 hexo d 时（相当于 git push），会提示输入用户名和密码</p>
<p><img src="https://i.loli.net/2021/03/15/LRyea8HVIqG2BbK.png" alt="image-20210315162410687"></p>
<p>点击 Sign in with your browser，浏览器录入用户名和密码后，出现授权界面，再回到 git brash，发现博客已上传成功。以后再上传，无需输入了，因为已保存在 windows 的凭据管理中。</p>
<p><img src="https://i.loli.net/2021/03/15/vmegsFpif9IrHPG.png" alt="image-20210315162511777"></p>
<p>若不提示也不能发布，在控制面板→凭据管理中器中删除 github 的凭据</p>
<img src="https://i.loli.net/2021/03/15/NtgKwnDZsXWP7AQ.png" alt="image-20210315153056419" style="zoom:80%;">]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 下 rpm 和 yum</title>
    <url>/2021/03/17/Linux%E4%B8%8Brpm%E5%92%8Cyum/</url>
    <content><![CDATA[<h1 id="linux中yum与rpm区别"><a href="#linux中yum与rpm区别" class="headerlink" title="linux中yum与rpm区别"></a><a href="https://www.cnblogs.com/ryanzheng/p/11322375.html">linux 中 yum 与 rpm 区别</a></h1><p>一、源代码形式</p>
<p>\1.   绝大多数开源软件都是直接以原码形式发布的</p>
<p>\2.   源代码一般会被打成.tar.gz 的归档压缩文件</p>
<p>\3.   源代码需要编译成为二进制形式之后才能够运行使用</p>
<p>\4.   源代码基本编译流程：</p>
<p>1）.configure 检查编译环境；</p>
<p>2）make 对源代码进行编译；</p>
<p>3）make insall 将生成的可执行文件安装到当前计算机中</p>
<hr>
<p>二、RPM</p>
<p>RMP 是 LINUX 下的一种软件的可执行程序，你只要安装它就可以了。这种软件安装包通常是一个 RPM 包（Redhat Linux Packet Manager，就是 Redhat 的包管理器），后缀是.rpm。</p>
<p>RPM 是 Red Hat 公司随 Redhat Linux 推出了一个软件包管理器，通过它能够更加轻松容易地实现软件的安装。</p>
<p> 1. 安装软件：执行 rpm -ivh rpm 包名，如：<br> #rpm -ivh apache-1.3.6.i386.rpm<br> 2. 升级软件：执行 rpm -Uvh rpm 包名。<br> 3. 反安装：执行 rpm -e rpm 包名。<br> 4. 查询软件包的详细信息：执行 rpm -qpi rpm 包名<br> 5. 查询某个文件是属于那个 rpm 包的：执行 rpm -qf rpm 包名<br> 6. 查该软件包会向系统里面写入哪些文件：执行 rpm -qpl rpm 包名</p>
<p>1. 源代码形式的特点：操作复杂、编译时间长、极易出现问题、依赖关系复杂</p>
<p>2. 为了方便，RPM（redhat package manager）</p>
<p>3.RPM 通过将代码基于特定平台系统编译为可执行文件，并保存依赖关系，来简化开源软件的安装管理。针对不同的系统设定不同的包</p>
<p>4. 常用命令规范：linuxcast-1.2.0-30.el6.1686.rpm 包名 - 版本号 - 适用平台 - 32/64-rpm</p>
<p>5. 使用 rpm –i software.rpm (安装)；</p>
<p>rpm -e software.rpm (卸载)；</p>
<p>rpm –U software.rpm (升级形式安装)；</p>
<p>rpm –ivh <a href="http://www.linuxcast.net/software.rpm(%E6%94%AF%E6%8C%81%E9%80%9A%E8%BF%87http/ftp%E5%8D%8F%E8%AE%AE%E5%BD%A2%E5%BC%8F%E5%AE%89%E8%A3%85)">http://www.linuxcast.net/software.rpm (支持通过 http\ftp 协议形式安装)</a></p>
<p>-v 显示详细信息；-h 显示进度条</p>
<p>查询功能：rpm –qa 列出全部已经安装的.rpm 软件  rpm –qa |grep ***</p>
<hr>
<p>三：YUM</p>
<p>\1.   rpm 软件包形式的管理虽然方便，但是需要手工解决软件包的依赖关系。很多时候安装一个软件安装一个软件需要安装 1 个或者多个其他软件，手动解决时，很复杂，yum 解决这些问题。Yum 是 rpm 的前端程序，主要目的是设计用来自动解决 rpm 的依赖关系，其特点：</p>
<ol>
<li><p>自动解决依赖关系</p>
</li>
<li><p>可以对 rpm 进行分组，基于组进行安装操作</p>
</li>
<li><p>引入仓库概念，支持多个仓库</p>
</li>
<li><p>配置简单</p>
</li>
</ol>
<p>\2. yum 仓库用来存放所有的现有的.rpm 包，当使用 yum 安装一个 rpm 包时，需要依赖关系，会自动在仓库中查找依赖软件并安装。仓库可以是本地的，也可以是 HTTP、FTP、nfs 形式使用的集中地、统一的网络仓库。</p>
<p>\3. 仓库的配置文件 /etc/yum.repos.d 目录下</p>
<p>\4. 使用：</p>
<ol>
<li><p>yum install 安装；</p>
</li>
<li><p>yum remove 卸载；</p>
</li>
<li><p>yum update 升级制定软件</p>
</li>
</ol>
<p>\5. 安装的时候，会下载软件包.Rpm 在安装，所以用国内仓库</p>
<p>改变镜像源</p>
<ol>
<li><p>访问地址 <a href="http://mirrors.163.com/">http://mirrors.163.com/</a></p>
</li>
<li><p> 点 centos 使用帮助</p>
</li>
<li><p>按步骤来</p>
</li>
</ol>
<p>\6. 查询软件：可以使用 yumsearch **</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>yum</tag>
        <tag>rpm</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 安装 mysql 时忘记临时密码后再次生成临时密码</title>
    <url>/2021/03/19/Linux%E5%AE%89%E8%A3%85mysql%E6%97%B6%E5%BF%98%E8%AE%B0%E4%B8%B4%E6%97%B6%E5%AF%86%E7%A0%81%E5%90%8E%E5%86%8D%E6%AC%A1%E7%94%9F%E6%88%90%E4%B8%B4%E6%97%B6%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">vi /etc/my.conf1</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ZFQS:~ # cat /etc/my.cnf</span><br><span class="line"># For advice on how to change settings please see</span><br><span class="line"># http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html</span><br><span class="line">[mysqld]</span><br><span class="line">#</span><br><span class="line"># Remove leading # and set to the amount of RAM for the most important data</span><br><span class="line"># cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.</span><br><span class="line"># innodb_buffer_pool_size = 128M</span><br><span class="line">#</span><br><span class="line"># Remove leading # to turn on a very important data integrity option: logging</span><br><span class="line"># changes to the binary log between backups.</span><br><span class="line"># log_bin</span><br><span class="line">#</span><br><span class="line"># Remove leading # to set options mainly useful for reporting servers.</span><br><span class="line"># The server defaults are faster for transactions and fast SELECTs.</span><br><span class="line"># Adjust sizes as needed, experiment to find the optimal values.</span><br><span class="line"># join_buffer_size = 128M</span><br><span class="line"># sort_buffer_size = 2M</span><br><span class="line"># read_rnd_buffer_size = 2M</span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line"># Disabling symbolic-links is recommended to prevent assorted security risks</span><br><span class="line">symbolic-links=0</span><br><span class="line">log-error=/var/log/mysql/mysqld.log</span><br><span class="line">pid-file=/var/run/mysql/mysqld.pid</span><br></pre></td></tr></tbody></table></figure>
<p>如上图所示找到 datadir 目录，删除里面的文件。在重新初始化一次。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">cd /var/lib/mysql</span><br><span class="line">rm -rf *//删除文件</span><br><span class="line">//在重新初始化一次</span><br><span class="line">cd /usr/local/mysql //这是你下载的MySQL解压目录</span><br><span class="line">./bin/mysqld --initialize --user=mysqluser -- basedir=/usr/local/mysql12345</span><br></pre></td></tr></tbody></table></figure>
<p>这时会生成新的临时密码。</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>mysql</tag>
        <tag>密码</tag>
      </tags>
  </entry>
  <entry>
    <title>github 的三种验证方式</title>
    <url>/2021/03/13/github%E7%9A%84%E4%B8%89%E7%A7%8D%E9%AA%8C%E8%AF%81%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>Github 本身提供了多种认证方式，所有开发人员可以各取所需。 </p>
<ul>
<li><strong>SSH，这是最原始的方式，如果使用 git bash 只要按照官方文档一步一步配置就好了</strong><ul>
<li>小心坑：SSH 有可能需要配置代理，否则无法解析服务器域名。错误如下：</li>
<li>ssh: Could not resolve hostname github.com: no address associated with name</li>
<li> 解决办法：给 SSH 以及 git 客户端配置代理。</li>
</ul>
</li>
<li><strong>HTTPS，这也是比较方便的方式，但是每一次都需要输入用户名和密码。</strong><ul>
<li>小心坑：本机的 SSL 证书不是正规机构颁发的，验证失败。错误如下：</li>
<li>fatal: unable to access ‘<a href="https://github.com/owner/repo.git/'">https://github.com/owner/repo.git/'</a>: SSL certificate problem: unable to get local issuer certificate</li>
<li> 解决办法：将 Git 的 SSL 验证关闭，命令如下。</li>
<li> git config –global http.sslVerify false</li>
</ul>
</li>
<li><strong>Access Token，我个人认为最为便捷的方式之一，不失安全性。</strong><ul>
<li><a href="https://help.github.com/articles/creating-an-access-token-for-command-line-use/">https://help.github.com/articles/creating-an-access-token-for-command-line-use/</a></li>
<li> 使用方法：</li>
<li>1) 从 Settings 页面生成唯一的 Token</li>
<li><ol start="2">
<li> 手动拼接出远程仓库的地址，比如：https://$GH_TOKEN@github.com/owner/repo.git</li>
</ol>
</li>
<li>3）从以上地址克隆或使用 git remote add 的方式关联本地仓库，之后都不需要输入用户名和密码信息。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>验证</tag>
        <tag>SSH</tag>
        <tag>http</tag>
        <tag>token</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 下 nginx 安装配置</title>
    <url>/2021/03/23/linux%E4%B8%8Bnginx%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="4-Ningx安装"><a href="#4-Ningx安装" class="headerlink" title="4 Ningx安装"></a>4 Ningx 安装</h1><p>（一）安装<br>1. 安装准备<br>（1）下载<br>openssl-1.0.2l.tar.gz<br>zlib-1.2.11.tar.gz<br>pcre-8.38.tar.gz<br>（2）查看是否安装：<br>$rpm -qa zlib<br>$rpm -qa openssl<br>$rpm -qa pcre<br>tar 三个包<br>因系统已安装上述三个包，上述三个包只解压不编译，安装 nginx 时指定为 with 目录即可。<br>tar nginx 包</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">tar zxvf nginx-1.18.0.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> nginx1.12.1</span></span><br><span class="line"><span class="meta">$</span><span class="bash">./configure --prefix=/home/spms/nginx --with-openssl=../openssl-1.0.2l --with-zlib=../zlib-1.2.11 --with-pcre=../pcre-8.38</span> </span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">make</span></span><br><span class="line"><span class="meta">$</span><span class="bash">make install</span></span><br></pre></td></tr></tbody></table></figure>
<p>配置</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#vi nginx.conf</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">server {</span><br><span class="line">        listen       8850;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        #charset koi8-r;</span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line">        location / {</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm index.php;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"> 		location ~ \.php$ {</span><br><span class="line">            root           html;</span><br><span class="line">            fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">            fastcgi_index  index.php;</span><br><span class="line">            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">            include        fastcgi_params;</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure>
<p>将注释的 #号去掉，并在 fastcgi_param 参数的 $fastcgi_script_name 之前加入 $document_root.</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">http {</span><br><span class="line">　　 include       mime.types;</span><br><span class="line">    	default_type  application/octet-stream;</span><br><span class="line">         server_names_hash_bucket_size 128;</span><br><span class="line">         client_header_buffer_size 32k;</span><br><span class="line">     sendfile        on;</span><br><span class="line"> 	 tcp_nopush     on;</span><br><span class="line">	 tcp_nodelay    on;</span><br><span class="line">      #keepalive_timeout  0;</span><br><span class="line">       keepalive_timeout  65;</span><br><span class="line">         fastcgi_connect_timeout 300;</span><br><span class="line">       fastcgi_send_timeout 300;</span><br><span class="line">       fastcgi_read_timeout 300;</span><br><span class="line">         fastcgi_buffer_size 64k;</span><br><span class="line">         fastcgi_buffers 4 64k;</span><br><span class="line">         fastcgi_busy_buffers_size 128k;</span><br><span class="line">         fastcgi_temp_file_write_size 128k;</span><br></pre></td></tr></tbody></table></figure>
<p><strong>修改 fastcgi.conf 用下面内容覆盖原文件：</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">fastcgi_param  GATEWAY_INTERFACE  CGI/1.1;</span><br><span class="line">fastcgi_param  SERVER_SOFTWARE    nginx;</span><br><span class="line">fastcgi_param  QUERY_STRING      $query_string;</span><br><span class="line">fastcgi_param  REQUEST_METHOD    $request_method;</span><br><span class="line">fastcgi_param  CONTENT_TYPE      $content_type;</span><br><span class="line">fastcgi_param  CONTENT_LENGTH    $content_length;</span><br><span class="line">fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;</span><br><span class="line">fastcgi_param  SCRIPT_NAME        $fastcgi_script_name;</span><br><span class="line">fastcgi_param  REQUEST_URI        $request_uri;</span><br><span class="line">fastcgi_param  DOCUMENT_URI      $document_uri;</span><br><span class="line">fastcgi_param  DOCUMENT_ROOT      $document_root;</span><br><span class="line">fastcgi_param  SERVER_PROTOCOL    $server_protocol;</span><br><span class="line">fastcgi_param  REMOTE_ADDR        $remote_addr;</span><br><span class="line">fastcgi_param  REMOTE_PORT        $remote_port;</span><br><span class="line">fastcgi_param  SERVER_ADDR        $server_addr;</span><br><span class="line">fastcgi_param  SERVER_PORT        $server_port;</span><br><span class="line">fastcgi_param  SERVER_NAME        $server_name;</span><br></pre></td></tr></tbody></table></figure>
<p>原始文件多了如下三行（不用改变应该可以？）：<br>fastcgi_param  REQUEST_SCHEME     $scheme;<br>fastcgi_param  HTTPS              $https if_not_empty;<br>fastcgi_param  REDIRECT_STATUS    200;</p>
<p>（三）检测是否安装成功<br>$ cd  /home/nginx/nginx/sbin<br>$ ./nginx -t<br>出现如下所示提示，表示安装成功 </p>
<p>启动 nginx</p>
<p>cd ../../nginx/sbin</p>
<p>./nginx</p>
<p>如果之前已经启动了 nginx 请使用如下命令：</p>
<p>./nginx -s reload</p>
<p>在 /usr/local/nginx/html/ 目录下创建一个文件 index.php</p>
<p>touch index.php</p>
<p>内容为：<!--? echo phpinfo(); ?--><br>结果为：<br>我的启动脚本：<br>/home/spms/ctrl_nginx.sh</p>
<p>整套系统开机启动：<br>启动放到如下文件<br>/etc/init.d/after.local<br>vi after.local<br>su - db2inst1 -c “db2start”<br>su - spms -c “ctrl_tomcat.sh start”<br>su - spms -c “ctrl_php-fpm.sh start”<br>su - spms -c “ctrl_nginx.sh start”</p>
<p>注：设置 nginx 和 php-fpm 更改上传文件大小限制<br>Nginx 和 php 默认不支持上传过大的文件。<br>假如我们要求上传的文件大小为 20M，默认配置就不允许上传了。<br>下面我们更改 nginx 和 php 配置，设定上传的限制为 20M。<br>Nginx 配置更改<br>如果上传文件时超过了 nginx 的限制，就会返回一个 “413 Request Entity Too Large” 的错误。<br>我们只要更改 nginx 的配置文件 “nginx.conf” 即可。<br>在 http {} 中添加一个 client_max_body_size 20m; 配置项；<br>修改完成之后重启 nginx 或 reload 配置。</p>
<p>PHP 配置更改<br>除了 nginx 对文件大小有要求，php 也做了限制。<br>php 的配置文件为 php.ini。<br>我们需要修改下面的配置：</p>
<p>file_uploads = On ; 打开文件上传选项<br>upload_max_filesize = 20M ; 上传文件上限<br>post_max_size = 20M ;post 上限 </p>
<p>; 还需要根据实际情况调整下面的选项<br>max_execution_time = 180 ; 脚本最大执行时间（秒） ，过短会导致文件还没上传完脚本就停止了。<br>max_input_time = 180 ; 请求的最大传输时间，过短会导致文件还没上传完传输就停止了。<br>memory_limit = 128M ; 内存上限<br>修改完成后重启 php-fpm 或 reload 配置。注意：与 tomcat 共用：<br>1.Tomcat 修改 server.xml 端口为 8858<br>2.Nginx 端口为 8848<br>3.php 应用的目录复制到 /home/spms/SPMS（为了合肥转接的能用）<br>4.11.64.65.15:8848/SPMS 是原来的应用<br>  11.64.17.23:8848/SPMS（合肥转接）<br>5.11.64.65.15:8848/SPMS/ZFJS 是增加的应用<br>  11.64.17.23:8848/SPMS/ZFJS（合肥转接）<br>Nginx.conf 配置参见生产系统。</p>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 下 Mysql 安装</title>
    <url>/2021/03/17/linux%E4%B8%8BMysql%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="1-Mysql下载（linux）"><a href="#1-Mysql下载（linux）" class="headerlink" title="1.Mysql下载（linux）"></a>1.<strong>Mysql 下载（linux）</strong></h1><h2 id="1-下载源码包（一个压缩包）"><a href="#1-下载源码包（一个压缩包）" class="headerlink" title="1.下载源码包（一个压缩包）"></a>1. 下载源码包（一个压缩包）</h2><p><img data-src="https://i.loli.net/2021/03/17/e3hmViPTBd7fkoy.png" alt="image-20210317163318307"></p>
<h2 id="2-下载-rpm安装包（四个安装包）"><a href="#2-下载-rpm安装包（四个安装包）" class="headerlink" title="2.下载.rpm安装包（四个安装包）"></a>2. 下载.rpm 安装包（四个安装包）</h2><p><img data-src="https://i.loli.net/2021/03/17/7vUQOkcEGmrioeg.png" alt="image-20210317164059672"></p>
<h2 id="3-下载-rpm套件组（（含依赖组件）"><a href="#3-下载-rpm套件组（（含依赖组件）" class="headerlink" title="3.下载.rpm套件组（（含依赖组件）"></a>3. 下载.rpm 套件组（（含依赖组件）</h2><p><img data-src="https://i.loli.net/2021/03/17/q326p7iVjXoeTYP.png" alt="image-20210317164842225"></p>
<h1 id="2-上传到安装目录"><a href="#2-上传到安装目录" class="headerlink" title="2.上传到安装目录"></a>2. <strong>上传到安装目录</strong></h1><p>根据安装方式（源码方式或 rpm 方式，ftp 到 /home/spms (spms 用户安装</p>
<h1 id="3-查看和删除旧版MySql"><a href="#3-查看和删除旧版MySql" class="headerlink" title="3.查看和删除旧版MySql"></a>3. <strong>查看和删除旧版 MySql</strong></h1><h2 id="1-查询旧版mysql"><a href="#1-查询旧版mysql" class="headerlink" title="1.查询旧版mysql"></a>1. 查询旧版 mysql</h2><p>可能结果（假设）</p>
<p><img data-src="https://i.loli.net/2021/03/19/Hg9hIFwXPqvaSkW.png" alt="image-20210319100704842"></p>
<p>以下为我的电脑查询情况，没有安装 mysql，应该不用卸载。其中 libqt4-sql-mysql Qt 连接 MySQL 数据库的驱动，libmysqlclient 是根据 MySQL client/server 协议，使用 C 语言实现的库。有很多的客户端 api 使用 libmysqlclient 这个库去和 MySQL Server 进行通信。可能是安装 php 时安装上的，可以不用删除？</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">spms@ZFQS:~&gt; rpm -qa | grep mysql</span><br><span class="line">libqt4-sql-mysql-4.6.3-5.25.4</span><br><span class="line">libmysqlclient_r15-5.0.96-0.6.1</span><br><span class="line">spms@ZFQS:~&gt; </span><br></pre></td></tr></tbody></table></figure>
<h2 id="2-卸载旧版本MySQL"><a href="#2-卸载旧版本MySQL" class="headerlink" title="2.卸载旧版本MySQL"></a>2. <strong>卸载旧版本 MySQL</strong></h2><h3 id="普通删除（依据上述查询结果）"><a href="#普通删除（依据上述查询结果）" class="headerlink" title="普通删除（依据上述查询结果）"></a>普通删除（依据上述查询结果）</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">rpm -e mysql-libs-5.1.73-8.el6_8.x86_64 mysql-server-5.1.73-8.el6_8.x86_64 mysql-devel-5.1.73-8.el6_8.x86_64</span><br></pre></td></tr></tbody></table></figure>
<h3 id="可能失败，如下图所示"><a href="#可能失败，如下图所示" class="headerlink" title="可能失败，如下图所示"></a>可能失败，如下图所示</h3><p><img data-src="https://i.loli.net/2021/03/19/rguc1iVp7AXyteb.png" alt="image-20210319101026658"></p>
<h3 id="强力删除"><a href="#强力删除" class="headerlink" title="强力删除"></a>强力删除</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">rpm -e --nodeps mysql-libs-5.1.73-8.el6_8.x86_64 mysql-server-5.1.73-8.el6_8.x86_64 mysql-devel-5.1.73-8.el6_8.x86_64</span><br></pre></td></tr></tbody></table></figure>
<p><img data-src="https://i.loli.net/2021/03/19/2y8Oj9654QlWqex.png" alt="image-20210319101219951"></p>
<h2 id="3-删除-etc-my-cnf-配置文件"><a href="#3-删除-etc-my-cnf-配置文件" class="headerlink" title="3.删除 /etc/my.cnf 配置文件"></a>3. 删除 /etc/my.cnf 配置文件</h2><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">rm /etc/my.cnf</span><br></pre></td></tr></tbody></table></figure>
<p><img data-src="https://i.loli.net/2021/03/19/vXAWDsfda2OS4Jk.png" alt="image-20210319101950684"></p>
<p>配置文件 my.cnf 已经被另存在 my.cnf.rpmsave 中</p>
<p><img data-src="https://i.loli.net/2021/03/19/GbLJq4xeNgBRp6t.png" alt="image-20210319102014249"></p>
<h1 id="4-RPM方式安装MySql"><a href="#4-RPM方式安装MySql" class="headerlink" title="4.RPM方式安装MySql"></a>4.<strong>RPM 方式安装 MySql</strong></h1><p>4 个 rpm 安装包，有依赖关系，按照以下顺序分别安装。</p>
<p>目前为 spms 用户获得超级权限后安装，否则出现权限问题，如下。spms 登录，su root 获得权限。</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">spms@ZFQS:~&gt; rpm -ivh mysql-community-common-5.7.32-1.sles12.x86_64.rpm</span><br><span class="line">warning: mysql-community-common-5.7.32-1.sles12.x86_64.rpm: Header V3 DSA signature: NOKEY, key ID 5072e1f5</span><br><span class="line">error: can't create transaction lock on /var/lib/rpm/__db.000</span><br><span class="line">spms@ZFQS:~&gt; </span><br></pre></td></tr></tbody></table></figure>


<p>目前 for SUSE 12 的 5.7 的最高版本为 5.7.32 （再 suse 11 中安装时，需要依赖，不知道依赖能不能成功补上）</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">rpm -ivh mysql-community-common-5.7.32-1.sles12.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-5.7.32-1.sles12.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-5.7.32-1.sles12.x86_64.rpm </span><br><span class="line">rpm -ivh mysql-community-server-5.7.32-1.sles12.x86_64.rpm</span><br></pre></td></tr></tbody></table></figure>
<p>目前 for SUSE 11 的 5.7 的最高版本为 5.7.25 ，我的机器能正常安装，但最后一个包出现警告，看是否影响使用，如下</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">spms@ZFQS:~&gt; su root</span><br><span class="line">口令： </span><br><span class="line">ZFQS:/home/spms # </span><br><span class="line">ZFQS:/home/spms # rpm -ivh mysql-community-common-5.7.25-1.sles11.x86_64.rpm</span><br><span class="line">warning: mysql-community-common-5.7.25-1.sles11.x86_64.rpm: Header V3 DSA signature: NOKEY, key ID 5072e1f5</span><br><span class="line">Preparing...                ########################################### [100%]</span><br><span class="line">   1:mysql-community-common ########################################### [100%]</span><br><span class="line">ZFQS:/home/spms # rpm -ivh mysql-community-libs-5.7.25-1.sles11.x86_64.rpm</span><br><span class="line">warning: mysql-community-libs-5.7.25-1.sles11.x86_64.rpm: Header V3 DSA signature: NOKEY, key ID 5072e1f5</span><br><span class="line">Preparing...                ########################################### [100%]</span><br><span class="line">   1:mysql-community-libs   ########################################### [100%]</span><br><span class="line">ZFQS:/home/spms # rpm -ivh mysql-community-client-5.7.25-1.sles11.x86_64.rpm</span><br><span class="line">warning: mysql-community-client-5.7.25-1.sles11.x86_64.rpm: Header V3 DSA signature: NOKEY, key ID 5072e1f5</span><br><span class="line">Preparing...                ########################################### [100%]</span><br><span class="line">   1:mysql-community-client ########################################### [100%]</span><br><span class="line">ZFQS:/home/spms # rpm -ivh mysql-community-server-5.7.25-1.sles11.x86_64.rpm</span><br><span class="line">warning: mysql-community-server-5.7.25-1.sles11.x86_64.rpm: Header V3 DSA signature: NOKEY, key ID 5072e1f5</span><br><span class="line">Preparing...                ########################################### [100%]</span><br><span class="line">   1:mysql-community-server ########################################### [100%]</span><br><span class="line">insserv: warning: script 'S01ITMAgents1' missing LSB tags</span><br><span class="line">insserv: warning: script 'ITMAgents1' missing LSB tags</span><br><span class="line">ZFQS:/home/spms # </span><br></pre></td></tr></tbody></table></figure>
<h2 id="查询安装路径"><a href="#查询安装路径" class="headerlink" title="查询安装路径"></a>查询安装路径</h2><p>如果想查询 rpm 包详细的安装文件列表及每个文件的实际存储路径，可通过命令 rpm -ql 来查询，如：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">rpm -ql mysql-community-common-5.7.32-1.sles12.x86_64</span><br><span class="line">/usr/bin/mysql</span><br><span class="line">/usr/bin/mysql_config_editor</span><br></pre></td></tr></tbody></table></figure>
<h2 id="临时密码"><a href="#临时密码" class="headerlink" title="临时密码"></a>临时密码</h2><p>mysql 从 5.7 默认安装之后 root 是有密码的，为了加强安全性，mysql5.7 为 root 用户随机生成一个密码，它在 error log 中。<br>还有，mysql 只有启动过一次才可以查看临时密码。随机密码保存在 /var/log/mysql/mysqld.log 中，可 cat 或 grep 查看</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">grep <span class="string">'temporary password'</span> /var/<span class="built_in">log</span>/mysql/mysqld.log</span><br><span class="line">2021-03-19T08:30:03.108793Z 1 [Note] A temporary password is generated <span class="keyword">for</span> root@localhost: f85WFz&lt;2zt.j</span><br></pre></td></tr></tbody></table></figure>
<h2 id="登录Mysql（rpm安装完自动启动、自动自启动？）"><a href="#登录Mysql（rpm安装完自动启动、自动自启动？）" class="headerlink" title="登录Mysql（rpm安装完自动启动、自动自启动？）"></a>登录 Mysql（rpm 安装完自动启动、自动自启动？）</h2><p><strong>linux 的 root 安装，spms 可以登录</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">spms@ZFQS:/&gt; mysql -u root -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 21</span><br><span class="line">Server version: 5.7.25</span><br><span class="line">​```</span><br><span class="line">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line">Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.</span><br><span class="line">mysql&gt; </span><br></pre></td></tr></tbody></table></figure>
<h2 id="修改MySQL的root本地登录密码"><a href="#修改MySQL的root本地登录密码" class="headerlink" title="修改MySQL的root本地登录密码"></a>修改 MySQL 的 root 本地登录密码</h2><p>shell 下：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">mysqladmin -u root  -p password "Mysql123@xl"</span><br></pre></td></tr></tbody></table></figure>
<p> 或临时密码登录 mysql 后修改：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; set password for 'root'@'localhost'=password('Mysql123@xl'); </span><br></pre></td></tr></tbody></table></figure>
<h1 id="5-MySQL常用命令"><a href="#5-MySQL常用命令" class="headerlink" title="5.MySQL常用命令"></a>5.MySQL 常用命令</h1><h2 id="查询密码策略"><a href="#查询密码策略" class="headerlink" title="查询密码策略"></a>查询密码策略</h2><p>通过 msyql 环境变量可以查看密码策略的相关信息：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show variables like <span class="string">'%password%'</span>;</span></span><br><span class="line">+---------------------------------------+--------+</span><br><span class="line">| Variable_name                         | Value  |</span><br><span class="line">+---------------------------------------+--------+</span><br><span class="line">| default_password_lifetime             | 0      |</span><br><span class="line">| disconnect_on_expired_password        | ON     |</span><br><span class="line">| log_builtin_as_identified_by_password | OFF    |</span><br><span class="line">| mysql_native_password_proxy_users     | OFF    |</span><br><span class="line">| old_passwords                         | 0      |</span><br><span class="line">| report_password                       |        |</span><br><span class="line">| sha256_password_proxy_users           | OFF    |</span><br><span class="line">| validate_password_check_user_name     | OFF    |</span><br><span class="line">| validate_password_dictionary_file     |        |</span><br><span class="line">| validate_password_length              | 8      |</span><br><span class="line">| validate_password_mixed_case_count    | 1      |</span><br><span class="line">| validate_password_number_count        | 1      |</span><br><span class="line">| validate_password_policy              | MEDIUM |</span><br><span class="line">| validate_password_special_char_count  | 1      |</span><br><span class="line">+---------------------------------------+--------+</span><br><span class="line">14 rows in set (0.01 sec)</span><br></pre></td></tr></tbody></table></figure>


<p>validate_password_policy：密码策略，默认为 MEDIUM 策略<br>validate_password_dictionary_file：密码策略文件，策略为 STRONG 才需要<br>validate_password_length：密码最少长度<br>validate_password_mixed_case_count：大小写字符长度，至少 1 个<br>validate_password_number_count ：数字至少 1 个<br>validate_password_special_char_count：特殊字符至少 1 个<br>上述参数是默认策略 MEDIUM 的密码检查规则。</p>
<p>共有以下几种密码策略：</p>
<table>
<thead>
<tr>
<th align="left">策略</th>
<th align="left">检查规则</th>
</tr>
</thead>
<tbody><tr>
<td align="left"> 0 or LOW</td>
<td align="left">Length</td>
</tr>
<tr>
<td align="left">1 or MEDIUM</td>
<td align="left">Length; numeric, lowercase/uppercase, and special characters</td>
</tr>
<tr>
<td align="left">2 or STRONG</td>
<td align="left">Length; numeric, lowercase/uppercase, and special characters; dictionary file</td>
</tr>
</tbody></table>
<h2 id="修改密码策略"><a href="#修改密码策略" class="headerlink" title="修改密码策略"></a>修改密码策略</h2><p>在 /etc/my.cnf 文件添加 validate_password_policy 配置，指定密码策略</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"># 选择0（LOW），1（MEDIUM），2（STRONG）其中一种，选择2需要提供密码字典文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">validate_password_policy=0121212</span><br></pre></td></tr></tbody></table></figure>
<p>如果不需要密码策略，添加 my.cnf 文件中添加如下配置禁用即可：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">validate_password = off111</span><br></pre></td></tr></tbody></table></figure>
<p>重新启动 mysql 服务使配置生效：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></tbody></table></figure>
<h2 id="添加远程登录用户"><a href="#添加远程登录用户" class="headerlink" title="添加远程登录用户"></a>添加远程登录用户</h2><p>默认只允许 root 帐户在本地登录，如果要在其它机器上连接 mysql，必须修改 root 允许远程连接，或者添加一个允许远程连接的帐户，为了安全起见，我添加一个新的帐户：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'yangxin'@'%' IDENTIFIED BY 'Yangxin0917!' WITH GRANT OPTION;111</span><br></pre></td></tr></tbody></table></figure>
<h2 id="配置默认编码为utf8"><a href="#配置默认编码为utf8" class="headerlink" title="配置默认编码为utf8"></a>配置默认编码为 utf8</h2><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; show variables like '%character%';</span><br></pre></td></tr></tbody></table></figure>
<p>修改 /etc/my.cnf 配置文件，在 [mysqld] 下添加编码配置，如下所示：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">character_set_server=utf8</span><br><span class="line">init_connect='SET NAMES utf8'123123123</span><br></pre></td></tr></tbody></table></figure>
<p>重新启动 mysql 服务，查看<a href="http://lib.csdn.net/base/mysql">数据库</a>默认编码如下所示：</p>
<p>默认配置文件路径：<br>配置文件：/etc/my.cnf<br>日志文件：/var/log//var/log/mysqld.log<br>服务启动脚本：/usr/lib/systemd/system/mysqld.service<br>socket 文件：/var/run/mysqld/mysqld.pid</p>
<h2 id="查看数据库的状态"><a href="#查看数据库的状态" class="headerlink" title="查看数据库的状态"></a>查看数据库的状态</h2><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> status</span></span><br><span class="line">--------------</span><br><span class="line"></span><br><span class="line">mysql  Ver 14.14 Distrib 5.7.25, for Linux (x86_64) using  EditLine wrapper</span><br><span class="line"></span><br><span class="line">Connection id:		4</span><br><span class="line">Current database:	</span><br><span class="line">Current user:		root@localhost</span><br><span class="line">SSL:			Not in use</span><br><span class="line">Current pager:		less</span><br><span class="line">Using outfile:		''</span><br><span class="line">Using delimiter:	;</span><br><span class="line">Server version:		5.7.25 MySQL Community Server (GPL)</span><br><span class="line">Protocol version:	10</span><br><span class="line">Connection:		Localhost via UNIX socket</span><br><span class="line">Server characterset:	latin1</span><br><span class="line">Db     characterset:	latin1</span><br><span class="line">Client characterset:	gbk</span><br><span class="line">Conn.  characterset:	gbk</span><br><span class="line">UNIX socket:		/var/lib/mysql/mysql.sock</span><br><span class="line">Uptime:			10 hours 20 min 53 sec</span><br><span class="line"></span><br><span class="line">Threads: 1  Questions: 5  Slow queries: 0  Opens: 105  Flush tables: 1  Open tables: 98  Queries per second avg: 0.000</span><br><span class="line">--------------</span><br></pre></td></tr></tbody></table></figure>


<h1 id="6-错误及解决"><a href="#6-错误及解决" class="headerlink" title="6.错误及解决"></a>6. 错误及解决</h1><h2 id="1-安装权限"><a href="#1-安装权限" class="headerlink" title="1.安装权限"></a>1. 安装权限</h2><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">spms@ZFQS:~&gt; rpm -ivh mysql-community-common-5.7.32-1.sles12.x86_64.rpm</span><br><span class="line">warning: mysql-community-common-5.7.32-1.sles12.x86_64.rpm: Header V3 DSA signature: NOKEY, key ID 5072e1f5</span><br><span class="line">error: can't create transaction lock on /var/lib/rpm/__db.000</span><br><span class="line">spms@ZFQS:~&gt; </span><br></pre></td></tr></tbody></table></figure>
<p>实际上是权限问题。su root 后可以安装。</p>
<h2 id="2-mysql密码策略"><a href="#2-mysql密码策略" class="headerlink" title="2.mysql密码策略"></a>2.mysql 密码策略</h2><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">spms@ZFQS:/&gt; mysqladmin -u root -p password "Mysql123"</span><br><span class="line">Enter password: </span><br><span class="line">mysqladmin: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Warning: Since password will be sent to server in plain text, use ssl connection to ensure password safety.</span><br><span class="line">mysqladmin: unable to change password; error: 'Your password does not satisfy the current policy requirements'</span><br><span class="line">spms@ZFQS:/&gt; </span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">root@linuxidc php-5.6.30]# ./configure --prefix=/usr/local/php --with-apxs2=/usr/local/apache2.4/bin/apxs --with-config-file-path=/usr/local/php/etc  --with-mysql=/usr/local/mysql --with-pdo-mysql=/usr/local/mysql --with-mysqli=/usr/local/mysql/bin/mysql_config --with-libxml-dir --with-gd --with-jpeg-dir --with-png-dir --with-freetype-dir --with-iconv-dir --with-zlib-dir --with-bz2 --with-openssl --with-mcrypt --enable-soap --enable-gd-native-ttf --enable-mbstring --enable-sockets --enable-exif  //安装PHP</span><br><span class="line">[root@linuxidc php-5.6.30]# echo $?  //安装完成没有错误用这个检查</span><br><span class="line">[root@linuxidc php-7.1.6]# ./configure --prefix=/usr/local/php7 --with-apxs2=/usr/local/apache2.4/bin/apxs --with-config-file-path=/usr/local/php7/etc  --with-pdo-mysql=/usr/local/mysql --with-mysqli=/usr/local/mysql/bin/mysql_config --with-libxml-dir --with-gd --with-jpeg-dir --with-png-dir --with-freetype-dir --with-iconv-dir --with-zlib-dir --with-bz2 --with-openssl --with-mcrypt --enable-soap --enable-gd-native-ttf --enable-mbstring --enable-sockets --enable-exif</span><br><span class="line">6.编译安装：</span><br></pre></td></tr></tbody></table></figure>
<h2 id="3-phpMyAdmin连接错误"><a href="#3-phpMyAdmin连接错误" class="headerlink" title="3.phpMyAdmin连接错误"></a>3.phpMyAdmin 连接错误</h2><p>phpMyAdmin mysqli_real_connect(): (HY000/2002)</p>
<p>进入 phpMyAdmin 目录，复制配置文件 config.sample.inc.php，重命名为 config.inc.php</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">cp config.sample.inc.php config.inc.php</span><br></pre></td></tr></tbody></table></figure>
<p>将配置文件里 host 的值 localhost 改为 127.0.0.1,</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">vi config.inc.php</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$cfg['Servers'][$i]['host'] = '127.0.0.1';</span><br></pre></td></tr></tbody></table></figure>

]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>php7.3 的 Mysql 配置和连接</title>
    <url>/2021/03/22/php7-3%E7%9A%84Mysql%E9%85%8D%E7%BD%AE%E5%92%8C%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<p>原文链接：<a href="https://blog.csdn.net/u013785951/article/details/60876816">https://blog.csdn.net/u013785951/article/details/60876816</a></p>
<p>PHP 官方手册: <a href="http://php.net/manual/en/book.mysqli.php">http://php.net/manual/en/book.mysqli.php</a></p>
<p>MYSQL 也叫 Original MySQL，PHP4 版本的 MYSQL 扩展，从 PHP5 起已经被废弃，并别从 PHP7 开始已经被移除。</p>
<p>MYSQLI 叫做 “MySQL 增强扩展”。</p>
<p>MYSQLND MYSQL NATIVE DIRVER 叫做 MYSQL “官方驱动” 或者更加直接点的叫做 “原生驱动”</p>
<p>PDO PHP Data Objects PHP 数据对象，是 PHP 应用中的一个数据库抽象层规范。 </p>
<p>API 是一个应用程序接口（Application Programming Interface 的缩写），定义了类，方法，函数，变量等等一切你的应用程序中为了完成特定任务而需要调用的内容。在 PHP 应用程序需要和数据库进行交互的时候所需要的 API 通常是通过 PHP 扩展暴露出来（给终端 PHP 程序员调用）。</p>
<p>MYSQL 和 MYSQLI 扩展就提供了这样的 API。</p>
<p>2 什么是驱动？</p>
<p>驱动是一段设计用来于一种特定类型的数据库服务器进行交互的软件代码。驱动可能会调用一些库，比如 MySQL 客户端库或者 MySQL Native 驱动库。 这些库实现了用于和 MySQL 数据库服务器进行交互的底层协议。</p>
<p>在 PHP 拓展的角度上看，MYSQL 和 MYSQLi 还是比较上层的拓展，依赖更底层的库去连接和访问数据库。<br>MYSQLND 就是所说的底层的数据库驱动。当然，还有一个驱动叫做 libmysqlclient。至于如何选择使用这两种驱动的哪一种，请看这里选择哪一种底层数据库驱动。</p>
<p>总的来说:<br>从应用的层面上看，我们通过 PHP 的 MYSQL 或者 MYSQLi 扩展提供的 API 去操作数据库。</p>
<p>从底层来看，MYSQLND 提供了底层和数据库交互的支持 (可以简单理解为和 MySQL server 进行网络协议交互)。</p>
<p>而 PDO，则提供了一个统一的 API 接口，使得你的 PHP 应用不去关心具体要连接的数据库服务器系统类型。也就是说，如果你使用 PDO 的 API，可以在任何需要的时候无缝切换数据库服务器。比如 MYSQL,SQLITE 任何数据库都行。</p>
<p>即从大部分功能上看，PDO 提供的 API 接口和 MYSQLI 提供的接口对于普通的增删改查效果是一致的。</p>
<p>最后贴下代码：</p>
<p>MYSQL 连接：</p>
<figure class="highlight php"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$conn</span> = @ mysql_connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">""</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"数据库连接错误"</span>);</span><br><span class="line">mysql_select_db(<span class="string">"bbs"</span>, <span class="variable">$conn</span>);</span><br><span class="line">mysql_query(<span class="string">"set names 'utf8'"</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"数据库连接成功"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>MYSQLI 连接：</p>
<figure class="highlight php"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$conn</span> = mysqli_connect(<span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">''</span>, <span class="string">'bbs'</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$conn</span>){</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"数据库连接错误"</span> . mysqli_connect_error());</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">echo</span><span class="string">"数据库连接成功"</span>;</span><br><span class="line">}</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>PDO 连接：</p>
<figure class="highlight php"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">try</span>{</span><br><span class="line"><span class="variable">$pdo</span>=<span class="keyword">new</span> pdo(<span class="string">"mysql:host=localhost;dbname=bbs"</span>,<span class="string">"root"</span>,<span class="string">""</span>);</span><br><span class="line">}<span class="keyword">catch</span>(PDDException <span class="variable">$e</span>){</span><br><span class="line"><span class="keyword">echo</span><span class="string">"数据库连接错误"</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">echo</span><span class="string">"数据库连接成功"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>想更多去了解他们的区别和联系，可以手动去编译一下 PHP 的源代码。注意参数</p>
<p>–enable-pdo<br>–with-pdo-mysql<br>–enable-mysqlnd<br>–with-mysqli<br>–with-mysql//php7 的已经不再支持，此参数 configure 的时候会报 ERROR</p>
]]></content>
      <categories>
        <category>php7</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>php7</tag>
        <tag>mysqli</tag>
        <tag>mysqlnd</tag>
      </tags>
  </entry>
  <entry>
    <title>php 命令行参考</title>
    <url>/2021/03/24/php%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E8%80%83/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">spms@ZFQS:~/php7/bin&gt; php -h</span><br><span class="line">Usage: php [options] [-f] &lt;file&gt; [--] [args...]</span><br><span class="line">   php [options] -r &lt;code&gt; [--] [args...]</span><br><span class="line">   php [options] [-B &lt;begin_code&gt;] -R &lt;code&gt; [-E &lt;end_code&gt;] [--] [args...]</span><br><span class="line">   php [options] [-B &lt;begin_code&gt;] -F &lt;file&gt; [-E &lt;end_code&gt;] [--] [args...]</span><br><span class="line">   php [options] -S &lt;addr&gt;:&lt;port&gt; [-t docroot] [router]</span><br><span class="line">   php [options] -- [args...]</span><br><span class="line">   php [options] -a</span><br><span class="line"></span><br><span class="line">  -a               Run interactively</span><br><span class="line">  -c &lt;path&gt;|&lt;file&gt; Look for php.ini file in this directory</span><br><span class="line">  -n               No configuration (ini) files will be used</span><br><span class="line">  -d foo[=bar]     Define INI entry foo with value 'bar'</span><br><span class="line">  -e               Generate extended information for debugger/profiler</span><br><span class="line">  -f &lt;file&gt;        Parse and execute &lt;file&gt;.</span><br><span class="line">  -h               This help</span><br><span class="line">  -i               PHP information</span><br><span class="line">  -l               Syntax check only (lint)</span><br><span class="line">  -m               Show compiled in modules</span><br><span class="line">  -r &lt;code&gt;        Run PHP &lt;code&gt; without using script tags &lt;?..?&gt;</span><br><span class="line">  -B &lt;begin_code&gt;  Run PHP &lt;begin_code&gt; before processing input lines</span><br><span class="line">  -R &lt;code&gt;        Run PHP &lt;code&gt; for every input line</span><br><span class="line">  -F &lt;file&gt;        Parse and execute &lt;file&gt; for every input line</span><br><span class="line">  -E &lt;end_code&gt;    Run PHP &lt;end_code&gt; after processing all input lines</span><br><span class="line">  -H               Hide any passed arguments from external tools.</span><br><span class="line">  -S &lt;addr&gt;:&lt;port&gt; Run with built-in web server.</span><br><span class="line">  -t &lt;docroot&gt;     Specify document root &lt;docroot&gt; for built-in web server.</span><br><span class="line">  -s               Output HTML syntax highlighted source.</span><br><span class="line">  -v               Version number</span><br><span class="line">  -w               Output source with stripped comments and whitespace.</span><br><span class="line">  -z &lt;file&gt;        Load Zend extension &lt;file&gt;.</span><br><span class="line"></span><br><span class="line">  args...          Arguments passed to script. Use -- args when first argument</span><br><span class="line">                   starts with - or script is read from stdin</span><br><span class="line"></span><br><span class="line">  --ini            Show configuration file names</span><br><span class="line"></span><br><span class="line">  --rf &lt;name&gt;      Show information about function &lt;name&gt;.</span><br><span class="line">  --rc &lt;name&gt;      Show information about class &lt;name&gt;.</span><br><span class="line">  --re &lt;name&gt;      Show information about extension &lt;name&gt;.</span><br><span class="line">  --rz &lt;name&gt;      Show information about Zend extension &lt;name&gt;.</span><br><span class="line">  --ri &lt;name&gt;      Show configuration for extension &lt;name&gt;.</span><br><span class="line"></span><br><span class="line">spms@ZFQS:~/php7/bin&gt; </span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>命令行</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlserver 语句记录</title>
    <url>/2021/03/03/sqlserver%E8%AF%AD%E5%8F%A5%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="SQLServer显示从第-bgn行的数据共-num行"><a href="#SQLServer显示从第-bgn行的数据共-num行" class="headerlink" title="SQLServer显示从第@bgn行的数据共@num行"></a>SQLServer 显示从第 @bgn 行的数据共 @num 行</h2><p>根据某字段排序，形成 row 列，以 row 列为为条件任意显示所需行数的记录</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TOP (<span class="variable">@num</span>) <span class="operator">*</span></span><br><span class="line">    <span class="keyword">FROM</span>   (<span class="keyword">SELECT</span> <span class="operator">*</span>,</span><br><span class="line">                   <span class="built_in">Row_number</span>()</span><br><span class="line">                     <span class="keyword">OVER</span> (</span><br><span class="line">                       <span class="keyword">ORDER</span> <span class="keyword">BY</span> 户名) <span class="keyword">AS</span> <span class="type">row</span></span><br><span class="line">            <span class="keyword">FROM</span>   tb_red_dw) a</span><br><span class="line">    <span class="keyword">WHERE</span>  <span class="type">row</span> <span class="operator">&gt;=</span> <span class="variable">@bgn</span></span><br><span class="line">           <span class="keyword">AND</span> ( [证件号码] <span class="keyword">LIKE</span> <span class="string">'%'</span> <span class="operator">+</span> <span class="variable">@id</span>_no <span class="operator">+</span> <span class="string">'%'</span></span><br><span class="line">                  <span class="keyword">AND</span> [户名] <span class="keyword">LIKE</span> <span class="string">'%'</span> <span class="operator">+</span> <span class="variable">@acc</span>_name <span class="operator">+</span> <span class="string">'%'</span></span><br><span class="line">                  <span class="keyword">AND</span> [法人代表] <span class="keyword">LIKE</span> <span class="string">'%'</span> <span class="operator">+</span> <span class="variable">@fr</span>_name <span class="operator">+</span> <span class="string">'%'</span></span><br><span class="line">                  <span class="keyword">AND</span> [法人代表证件号] <span class="keyword">LIKE</span> <span class="string">'%'</span> <span class="operator">+</span> <span class="variable">@fr</span>_id <span class="operator">+</span> <span class="string">'%'</span></span><br><span class="line">                  <span class="keyword">AND</span> [涉案批次] <span class="keyword">LIKE</span> <span class="string">'%'</span> <span class="operator">+</span> <span class="variable">@sapc</span> <span class="operator">+</span> <span class="string">'%'</span> )</span><br></pre></td></tr></tbody></table></figure>
<h2 id="参数参与条件的写法"><a href="#参数参与条件的写法" class="headerlink" title="参数参与条件的写法"></a>参数参与条件的写法</h2><p>方法一、一般可用 case 条件语句，但因 case 后的 then 只能为常量，不能是表达式，有时无法写出</p>
<p>方法二、将参数条件与符合参数条件描述的其他条件写在一起，更通用些</p>
<p>如参数 @state，1 正常状态（撤销日期字段为空），9 全部（撤销日期字段可为空也可不为空）</p>
<p>select * from tb_rhzh_gr where (@state=’1’ and 撤销日期 is null or @state=’9’)</p>
<h2 id="短期内拥有账户的个数（outer-apply）"><a href="#短期内拥有账户的个数（outer-apply）" class="headerlink" title="短期内拥有账户的个数（outer apply）"></a>短期内拥有账户的个数（outer apply）</h2><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.<span class="operator">*</span>,</span><br><span class="line">       <span class="comment">--a.身份序号,</span></span><br><span class="line">       <span class="comment">--法定代表人或负责人身份证件编号,</span></span><br><span class="line">       <span class="comment">--a.账号,</span></span><br><span class="line">       <span class="comment">--a.开户日期,</span></span><br><span class="line">       ff.短期账户数量</span><br><span class="line"><span class="comment">--INTO   #tmp_all</span></span><br><span class="line"><span class="keyword">FROM</span>   #tmp A</span><br><span class="line">       <span class="keyword">OUTER</span> APPLY (<span class="keyword">SELECT</span> <span class="built_in">Count</span>(<span class="operator">*</span>) 短期账户数量,<span class="built_in">count</span>(<span class="keyword">distinct</span> 电话) 电话数量</span><br><span class="line">                    <span class="keyword">FROM</span>   #tmp B</span><br><span class="line">                    <span class="keyword">WHERE</span>  a.身份序号 <span class="operator">=</span> b.身份序号</span><br><span class="line">                           <span class="keyword">AND</span> <span class="built_in">Abs</span>(Datediff(<span class="keyword">day</span>, <span class="keyword">CONVERT</span>(<span class="type">DATE</span>, a.开户日期), <span class="keyword">CONVERT</span>(<span class="type">DATE</span>, 开户日期))) <span class="operator">&lt;=</span> <span class="variable">@days</span>) <span class="keyword">AS</span> FF</span><br><span class="line"><span class="keyword">ORDER</span>  <span class="keyword">BY</span> 身份序号,</span><br><span class="line">          开户日期</span><br></pre></td></tr></tbody></table></figure>
<p><a href=""></a></p>
]]></content>
      <categories>
        <category>SQLServer</category>
      </categories>
      <tags>
        <tag>SQLServer</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>php 编译安装 configure 参数解释</title>
    <url>/2021/03/17/php%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85configure%E5%8F%82%E6%95%B0%E8%A7%A3%E9%87%8A/</url>
    <content><![CDATA[<p>具体参数含义可以用./configure –help 来查看。</p>
<p>列表如下（部分参数未得到解释）：</p>
<p>指定 php 安装目录</p>
<p>–prefix=/usr/local/php </p>
<p>指定 php.ini 位置</p>
<p>–with-config-file-path=/usr/local/php/etc </p>
<p>mysql 安装目录，对 mysql 的支持</p>
<p>–with-mysql=/usr/local/mysql</p>
<p>mysqli 扩展技术不仅可以调用 MySQL 的存储过程、处理 MySQL 事务，而且还可以使访问数据库工作变得更加稳定。</p>
<p>–with-mysqli=/usr/local/mysql/bin/mysql_config   </p>
<p>整合 apache，apxs 功能是使用 mod_so 中的 LoadModule 指令，加载指定模块到 apache，要求 apache 要打开 SO 模块</p>
<p>–with-apxs2=/usr/local/apache/bin/apxs </p>
<p>选项指令 –with-iconv-dir 用于 PHP 编译时指定 iconv 在系统里的路径，否则会扫描默认路径。</p>
<p>–with-iconv-dir=/usr/local </p>
<p>–with-freetype-dir   打开对 freetype 字体库的支持 </p>
<p>–with-jpeg-dir   打开对 jpeg 图片的支持 </p>
<p>–with-png-dir   打开对 png 图片的支持 </p>
<p>–with-zlib-dir   打开 zlib 库的支持，用于 http 压缩传输</p>
<p>–with-libxml-dir   打开 libxml2 库的支持</p>
<p>–disable-rpath    关闭额外的运行库文件 </p>
<p>–enable-bcmath    打开图片大小调整，用到 zabbix 监控的时候用到了这个模块</p>
<p>–enable-shmop –enable-sysvsem  这样就使得你的 PHP 系统可以处理相关的 IPC 函数了。</p>
<p>–enable-inline-optimization  优化线程</p>
<p>–with-curl    打开 curl 浏览工具的支持 </p>
<p>–with-curlwrappers    运用 curl 工具打开 url 流 </p>
<p>–enable-mbregex</p>
<p>–enable-fpm 打上 PHP-fpm 补丁后才有这个参数，CGI 方式安装的启动程序</p>
<p>–enable-mbstring    多字节，字符串的支持 </p>
<p>–with-mcrypt                    mcrypt 算法扩展</p>
<p>–with-mhash                     mhash 算法扩展</p>
<p>–with-gd    打开 gd 库的支持 </p>
<p>–enable-gd-native-ttf   支持 TrueType 字符串函数库</p>
<p>–with-openssl      openssl 的支持，加密传输 https 时用到的</p>
<p>–enable-pcntl   freeTDS 需要用到的，可能是链接 mssql 才用到</p>
<p>–enable-sockets     打开 sockets 支持</p>
<p>–with-xmlrpc    打开 xml-rpc 的 c 语言 </p>
<p>–enable-zip   打开对 zip 的支持 </p>
<p>–enable-ftp   打开 ftp 的支持 </p>
<p>–with-bz2    打开对 bz2 文件的支持        </p>
<p>–without-iconv   关闭 iconv 函数，字符集间的转换 </p>
<p>–with-ttf     打开 freetype1.* 的支持，可以不加了 </p>
<p>–with-xsl     打开 XSLT 文件支持，扩展了 libXML2 库 ，需要 libxslt 软件 </p>
<p>–with-gettext     打开 gnu 的 gettext 支持，编码库用到 </p>
<p>–with-pear    打开 pear 命令的支持，PHP 扩展用的 </p>
<p>–enable-calendar    打开日历扩展功能</p>
<p>–enable-exif    图片的元数据支持 </p>
<p>–enable-magic-quotes    魔术引用的支持 </p>
<p>–disable-debug    关闭调试模式 </p>
<p>–with-mime-magic=/usr/share/file/magic.mime      魔术头文件位置</p>
<p>CGI 方式安装才用的参数</p>
<p>–enable-fastCGI            支持 fastcgi 方式启动 PHP</p>
<p>–enable-force-CGI-redirect        重定向方式启动 PHP</p>
<p>–with-ncurses         支持 ncurses 屏幕绘制以及基于文本终端的图形互动功能的动态库</p>
<p>–with-gmp  应该是支持一种规范</p>
<p>–enable-dbase                     建立 DBA 作为共享模块</p>
<p>–with-pcre-dir=/usr/local/bin/pcre-config      perl 的正则库案安装位置</p>
<p>–disable-dmalloc</p>
<p>–with-gdbm                     dba 的 gdbm 支持</p>
<p>–enable-sigchild</p>
<p>–enable-sysvshm</p>
<p>–enable-zend-multibyte         支持 zend 的多字节</p>
<p>–enable-wddx</p>
<p>–enable-soap<br>————————————————<br>版权声明：本文为 CSDN 博主「NiluChen」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/niluchen/article/details/41513217">https://blog.csdn.net/niluchen/article/details/41513217</a></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>config</tag>
        <tag>参数</tag>
      </tags>
  </entry>
  <entry>
    <title>typora 图片左对齐</title>
    <url>/2021/03/15/typora%E5%9B%BE%E7%89%87%E5%B7%A6%E5%AF%B9%E9%BD%90/</url>
    <content><![CDATA[<h2 id="Align-images"><a href="#Align-images" class="headerlink" title="Align images"></a>Align images</h2><p>Currently Typora does not support image alignment. But you can use HTML code like <code>&lt;center&gt;![img](src)&lt;/center&gt;</code> to align images in exported HTML or PDF.</p>
<p>Also, by default, if a paragraph only contains one image, it will be center aligned. It is controlled by CSS, and can be changed by <a href="http://support.typora.io/Add-Custom-CSS/">add custom CSS</a>:</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">p .md-image:only-child{</span><br><span class="line">    width: auto;</span><br><span class="line">    text-align: inherit;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>typora</category>
      </categories>
      <tags>
        <tag>typora</tag>
        <tag>图片</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2021/03/02/suse-linux-php%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="1-GCC和G-安装"><a href="#1-GCC和G-安装" class="headerlink" title="1 GCC和G++安装"></a>1 GCC 和 G++ 安装</h1><p>若 linux 没有安装 GCC（在编译 php 时会出错），<strong>可挂载 mount linux 镜像文件，rpm 安装。</strong></p>
<h2 id="1-1-有关查询命令"><a href="#1-1-有关查询命令" class="headerlink" title="1.1 有关查询命令"></a>1.1 有关查询命令</h2><ul>
<li>查看 Linux 的版本 </li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#cat /etc/issue</span><br><span class="line">  Welcome to SUSE Linux Enterprise Server 11SP1  (x86_64) - Kernel \r (\l).</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>查看 Linux 的内核 </li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#cat /proc/version</span><br><span class="line">  Linux version 2.6.32.12-0.7-default(geeko@buildhost) (gcc version 4.3.4 [gcc-4_3-branch revision 152973] (SUSELinux) ) #1 SMP 2010-05-20 11:14:20 +0200</span><br></pre></td></tr></tbody></table></figure>
<h2 id="1-2-挂载linux原盘（需要root权限）"><a href="#1-2-挂载linux原盘（需要root权限）" class="headerlink" title="1.2 挂载linux原盘（需要root权限）"></a>1.2 挂载 linux 原盘（需要 root 权限）</h2><h3 id="1-2-1-挂载linux-ISO镜像文件"><a href="#1-2-1-挂载linux-ISO镜像文件" class="headerlink" title="1.2.1 挂载linux ISO镜像文件"></a>1.2.1 挂载 linux ISO 镜像文件</h3><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#mkdir  /mnt/iso</span><br><span class="line">#mount -o loop -t iso9660  &lt;iso file&gt;  /mnt/iso （linux的ISO文件预先ftp到系统）</span><br></pre></td></tr></tbody></table></figure>
<h3 id="1-2-2-插入光驱挂载"><a href="#1-2-2-插入光驱挂载" class="headerlink" title="1.2.2 插入光驱挂载"></a>1.2.2 插入光驱挂载</h3><ul>
<li><p><strong>查看 CDROM 设备名称（一般为 /dev/cdrom）</strong></p>
</li>
<li><p>dmesg 显示开机信息</p>
</li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$ dmesg |egrep -i --color 'cdrom|dvd|cd/rw|writer'</span><br><span class="line">[  5.437164] sr0: scsi3-mmc drive: 24x/24x writerdvd-ram cd/rw xa/form2 cdda tray</span><br><span class="line">[    5.437307] cdrom: Uniform CD-ROM driverRevision: 3.20</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>less 查看有关文件命令 </li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$ less /proc/sys/dev/cdrom/info</span><br><span class="line">CD-ROMinformation, Id: cdrom.c 3.20 2003/12/17</span><br><span class="line">drive name:        sr0</span><br><span class="line">drive speed:        24</span><br></pre></td></tr></tbody></table></figure>
<p> 执行： lsblk（列出所有块设备）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#lsblk</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><strong>挂载插入的光盘 </strong></li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"># mkdir  /mnt/cdrom</span><br><span class="line"># mount -t iso9660 /dev/cdrom /mnt/cdrom</span><br></pre></td></tr></tbody></table></figure>
<p>（二）进入到安装位置：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#cd /mnt/iso/suse</span><br></pre></td></tr></tbody></table></figure>
<p>或</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#cd /mnt/cdrom/suse</span><br></pre></td></tr></tbody></table></figure>
<h2 id="1-3-安装依赖关系（64位即可，无需安装32位）防锈021"><a href="#1-3-安装依赖关系（64位即可，无需安装32位）防锈021" class="headerlink" title="1.3 安装依赖关系（64位即可，无需安装32位）防锈021"></a>1.3 安装依赖关系（64 位即可，无需安装 32 位）防锈 021</h2><p>安装前分别在 noarch 目 cd 录和 x86_64 目录找到相应的文件名。如 #l glibc*</p>
<ul>
<li>安装 glibc-devel-2.9-13.2.x86_64.rpm<br>–需要 linux-kernel-headers-2.6.27-2.22.noarch.rpm</li>
<li> 安装 gcc-4.3-62.198.x86_64.rpm<br>–需要安装 gcc43-4.3.3_20081022-11.18.x86_64.rpm</li>
<li> 安装 glibc-devel-32bit-2.9-13.2.x86_64.rpm</li>
<li> 安装 gcc-32bit-4.3-62.198.x86_64.rpm<br>　–需要安装 gcc43-32bit-4.3.3_20081022-11.18.x86_64.rpm<br>　–需要安装 libgomp43-32bit-4.3.3_20081022-11.18.x86_64.rpm</li>
<li> 安装 libstdc++43-devel-4.3.3_20081022-11.18.x86_64.rpm</li>
<li> 安装 gcc-c++-4.3-62.198.x86_64.rpm<br>　　–需要安装 gcc43-c++-4.3.3_20081022-11.18.x86_64.rpm</li>
<li> 安装 libstdc++43-devel-32bit-4.3.3_20081022-11.18.x86_64.rpm</li>
<li> 安装 libstdc++-devel-4.3-62.198.x86_64.rpm</li>
</ul>
<h3 id="1-3-1-安装安装glibc-devel"><a href="#1-3-1-安装安装glibc-devel" class="headerlink" title="1.3.1 安装安装glibc-devel"></a>1.3.1 安装安装 glibc-devel</h3><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">rpm -ivh noarch/linux-kernel-headers-2.6.32-1.4.13.noarch.rpm</span><br><span class="line">rpm -ivh x86_64/glibc-devel-2.11.1-0.17.4.x86_64.rpm</span><br></pre></td></tr></tbody></table></figure>
<h3 id="1-3-2-安装gcc"><a href="#1-3-2-安装gcc" class="headerlink" title="1.3.2 安装gcc"></a>1.3.2 安装 gcc</h3><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">rpm -ivh x86_64/gcc43-4.3.3_20081022-11.18.x86_64.rpm</span><br><span class="line">rpm -ivh x86_64/gcc-4.3-62.198.x86_64.rpm</span><br></pre></td></tr></tbody></table></figure>
<h3 id="1-3-3-安装g"><a href="#1-3-3-安装g" class="headerlink" title="1.3.3 安装g++"></a>1.3.3 安装 g++</h3><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">rpm -ivh x86_64/libstdc++43-devel-4.3.3_20081022-11.18.x86_64.rpm</span><br><span class="line">rpm -ivh x86_64/libstdc++-devel-4.3-62.198.x86_64.rpm</span><br><span class="line">rpm -ivh x86_64/gcc43-c++-4.3.3_20081022-11.18.x86_64.rpm</span><br><span class="line">rpm -ivh x86_64/gcc-c++-4.3-62.198.x86_64.rpm</span><br></pre></td></tr></tbody></table></figure>
<h2 id="1-4-libxml2-2-7-6-tar-gz安装"><a href="#1-4-libxml2-2-7-6-tar-gz安装" class="headerlink" title="1.4 libxml2-2.7.6.tar.gz安装"></a>1.4 libxml2-2.7.6.tar.gz 安装</h2><p>Linux 11 sp3 虽然安装了 libxml2.7.6，但没有生成 /usr/bin/xml2-config 文件，php5 安装时，configure 时显示找不到 xml2-config 错误而无法安装。可源码安装 libxml2 生成这个配置文件</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#tar zxvf libxml2-2.7.6.tar.gz</span><br><span class="line">#cd libxml2-2.7.6</span><br><span class="line">#./configure</span><br><span class="line">#make</span><br><span class="line">#make install</span><br></pre></td></tr></tbody></table></figure>
<h1 id="2-php5-安装"><a href="#2-php5-安装" class="headerlink" title="2 php5 安装"></a>2 php5 安装</h1><ul>
<li>内网 spms 用户安装</li>
</ul>
<h2 id="2-1-下载并上传"><a href="#2-1-下载并上传" class="headerlink" title="2.1 下载并上传"></a>2.1 下载并上传</h2><p>下载 php-5.6.31.tar.gz，并上传的 Linux 目录 /home/spms</p>
<h2 id="2-12-解压"><a href="#2-12-解压" class="headerlink" title="2.12 解压"></a>2.12 解压</h2><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$cd </span><br><span class="line">$tar -zvxf php-5.6.31.tar.gz</span><br></pre></td></tr></tbody></table></figure>
<h2 id="2-2-检查当前的环境是否满足要安装软件的依赖关系"><a href="#2-2-检查当前的环境是否满足要安装软件的依赖关系" class="headerlink" title="2.2 检查当前的环境是否满足要安装软件的依赖关系"></a>2.2 检查当前的环境是否满足要安装软件的依赖关系</h2><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$cd php-5.6.31</span><br><span class="line">$./configure --prefix=/home/spms/php5 --with-config-file-path=/home/spms/php5/etc --enable-fpm</span><br></pre></td></tr></tbody></table></figure>
<h2 id="2-3-编译"><a href="#2-3-编译" class="headerlink" title="2.3 编译"></a>2.3 编译</h2><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$Make（时间较长）</span><br><span class="line">$make install</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>(make clean make clean all 准备重新安装）</li>
</ul>
<p>$cp /home/php-5.6.31/php.ini-production  /homel/php5/etc/php.ini<br>上述安装方式在 php5 目录下不产生 php.ini，需要单独拷贝</p>
<p>$cp   /homel/php5/etc/php-fpm.conf.default   /homel/php5/etc/php-fpm.conf</p>
<p>保存配置文件后，检验配置是否正确的方法为:<br> /homel/php5/sbin/php-fpm -t<br>如果出现诸如 “test is successful” 字样，说明配置没有问题。<br>启动 php-fpm<br>启动脚本：/home/spms/ctrl_php-fpm.sh（要变成可执行权限，要指明 php.ini，否则上传文件大小限制无法指定。）<br>检测是否启动:<br>ps aux |grep php-fpm<br>netstat -ant |grep 9000</p>
<h1 id="3-php7安装"><a href="#3-php7安装" class="headerlink" title="3 php7安装"></a>3 php7 安装</h1><h2 id="1-安装依赖包"><a href="#1-安装依赖包" class="headerlink" title="1.安装依赖包"></a>1. 安装依赖包</h2><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">yum install -y gcc gcc-c++  make zlib zlib-devel pcre pcre-devel  libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel ncurses ncurses-devel curl curl-devel e2fsprogs e2fsprogs-devel krb5 krb5-devel openssl openssl-devel openldap openldap-devel nss_ldap openldap-clients openldap-servers</span><br></pre></td></tr></tbody></table></figure>
<p>suse linux 没有 yum 命令，其它方式安装依赖包</p>
<h2 id="2-下载或上传安装包"><a href="#2-下载或上传安装包" class="headerlink" title="2.下载或上传安装包"></a>2. 下载或上传安装包</h2><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">cd </span><br><span class="line">wget https://www.php.net/distributions/php-7.3.27.tar.gz</span><br></pre></td></tr></tbody></table></figure>
<p>内网 linux 可外网下载，将 php-7.3.27.tar.gz 上传至 linux 的 /home 目录（/home/spms)，</p>
<h2 id="3-解压"><a href="#3-解压" class="headerlink" title="3.解压"></a>3. 解压</h2><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">tar -zxvf php-7.3.27.tar.gz</span><br></pre></td></tr></tbody></table></figure>
<h2 id="4-配置PHP安装环境"><a href="#4-配置PHP安装环境" class="headerlink" title="4.配置PHP安装环境"></a>4. 配置 PHP 安装环境</h2><p>以下为能够安装的基本配置，网上很多参数的那种，要写 /usr/lib 等目录，非 root 用户没有权限，不能安装。需要配置其他功能室再查资料。</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> php-7.3.27</span></span><br><span class="line"><span class="meta">$</span><span class="bash">./configure --prefix=/home/spms/php7 --with-config-file-path=/home/spms/php7/etc --enable-fpm --enable-pdo --with-pdo-mysql --enable-mysqlnd --with-mysqli --with-openssl</span> </span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/local/php --with-zlib --enable-zip --with-openssl --enable-fpm --enable-mbstring --with-libdir=lib64</span><br></pre></td></tr></tbody></table></figure>
<h2 id="5-编译安装"><a href="#5-编译安装" class="headerlink" title="5.编译安装"></a>5. 编译安装</h2><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">make clear #重新配置和编译时使用</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></tbody></table></figure>
<h2 id="6-参数配置php-ini"><a href="#6-参数配置php-ini" class="headerlink" title="6.参数配置php.ini"></a>6. 参数配置 php.ini</h2><p>在之前编译的源码包中，找到 php.ini-production，复制到 /home/spms/php7 下，并改名为 php.ini：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">cd /home/spms/php-7.3.27</span><br><span class="line">cp php.ini-production /home/spms/php7/etc/php.ini</span><br></pre></td></tr></tbody></table></figure>
<h3 id="php-fpm-conf"><a href="#php-fpm-conf" class="headerlink" title="php-fpm.conf"></a>php-fpm.conf</h3><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">cd /home/spms/php7/etc</span><br><span class="line">cp php-fpm.conf.default php-fpm.conf</span><br></pre></td></tr></tbody></table></figure>
<h3 id="www-conf"><a href="#www-conf" class="headerlink" title="www.conf"></a><a href="http://www.conf/">www.conf</a></h3><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">cd /home/spms/php7/etc/php-fpm.d</span><br><span class="line">cp www.conf.default www.conf</span><br></pre></td></tr></tbody></table></figure>
<h4 id="修改php7端口号"><a href="#修改php7端口号" class="headerlink" title="修改php7端口号"></a>修改 php7 端口号</h4><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">vim /usr/local/php7/etc/php-fpm.d/www.conf</span><br><span class="line">listen = 0.0.0.0:9000</span><br></pre></td></tr></tbody></table></figure>
<h2 id="7-启动php"><a href="#7-启动php" class="headerlink" title="7.启动php"></a>7. 启动 php</h2><p>/usr/local/php7/sbin/php-fpm </p>
<h2 id="8-php常用命令"><a href="#8-php常用命令" class="headerlink" title="8.php常用命令"></a>8.php 常用命令</h2><p>查看是否已经开启</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ps -ef|grep php</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ps -A | grep -i php </span><br></pre></td></tr></tbody></table></figure>
<p>关闭 php-fpm 服务</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">pkill php-fpm</span><br></pre></td></tr></tbody></table></figure>
<p>查看模块</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">spms@ZFQS:~/php7/bin&gt; php -m</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>suse-linux 常用命令</title>
    <url>/2021/03/02/suse-linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="查看linux版本："><a href="#查看linux版本：" class="headerlink" title="查看linux版本："></a>查看 linux 版本：</h1><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"># cat /etc/issue</span><br><span class="line">Welcome to SUSE Linux Enterprise Server 11 SP3  (x86_64) - Kernel \r (\l).</span><br></pre></td></tr></tbody></table></figure>
<h1 id="查看linux内核："><a href="#查看linux内核：" class="headerlink" title="查看linux内核："></a>查看 linux 内核：</h1><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"># cat /proc/version</span><br><span class="line">Linux version 3.0.76-0.11-default (geeko@buildhost) (gcc version 4.3.4 [gcc-4_3-branch revision 152973] (SUSE Linux) ) #1 SMP Fri Jun 14 08:21:43 UTC 2013 (ccab990)</span><br></pre></td></tr></tbody></table></figure>
<h1 id="netstat-lntp-查看监听端口"><a href="#netstat-lntp-查看监听端口" class="headerlink" title="netstat -lntp 查看监听端口"></a>netstat -lntp 查看监听端口</h1><h1 id="chkconfig检查，设置系统服务"><a href="#chkconfig检查，设置系统服务" class="headerlink" title="chkconfig检查，设置系统服务"></a>chkconfig 检查，设置系统服务</h1><p>这是 Red Hat 公司遵循 GPL 规则所开发的程序，它可查询操作系统在每一个执行等级中会执行哪些系统服务，其中包括各类常驻服务。</p>
<p>语法</p>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">chkconfig [--<span class="type">add</span>][--<span class="type">del</span>][--<span class="type">list</span>][系统服务] 或 chkconfig [--<span class="type">level</span> &lt;等级代号&gt;][系统服务][<span class="type">on</span>/<span class="type">off</span>/<span class="type">reset</span>]</span><br></pre></td></tr></tbody></table></figure>
<p>参数：</p>
<p>参数：</p>
<p>–add 　增加所指定的系统服务，让 chkconfig 指令得以管理它，并同时在系统启动的叙述文件内增加相关数据。<br>–del 　删除所指定的系统服务，不再由 chkconfig 指令管理，并同时在系统启动的叙述文件内删除相关数据。<br>–level &lt;等级代号&gt; 　指定读系统服务要在哪一个执行等级中开启或关毕。</p>
<p>实例<br>列出 chkconfig 所知道的所有命令。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">chkconfig -list </span><br></pre></td></tr></tbody></table></figure>
<p>开启服务。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">chkconfig telnet on //开启Telnet服务</span><br></pre></td></tr></tbody></table></figure>
<p>关闭服务</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">chkconfig telnet off  //关闭Telnet服务</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title>常用好软件（随时发现随时更新）</title>
    <url>/2021/03/24/%E5%B8%B8%E7%94%A8%E5%A5%BD%E8%BD%AF%E4%BB%B6%EF%BC%88%E9%9A%8F%E6%97%B6%E5%8F%91%E7%8E%B0%E9%9A%8F%E6%97%B6%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
    <content><![CDATA[<h1 id="quicker您的指尖工具箱"><a href="#quicker您的指尖工具箱" class="headerlink" title="quicker您的指尖工具箱"></a>quicker 您的指尖工具箱</h1><p><strong>Quicker</strong> 是一个让 <strong>Windows 用户</strong>可以用<strong>最合适的方式</strong>、<strong>最快地</strong>触发想要的<strong>操作</strong>的软件工具，是一个<strong>场景化</strong>的工具箱，也是一个可以<strong>创造和分享新工具</strong>的平台。<a href="https://getquicker.net/">https://getquicker.net/</a></p>
<ul>
<li> 可以利用写博客头功能，省去 hexo new blog 命令</li>
<li>安装→注册→运行→鼠标中间或 ctrl+q 激活面板→工具箱→相应动作拖到面板→应用时激活执行</li>
</ul>
<img data-src="https://cdn.jsdelivr.net/gh/netxulei/typora_img/typora-pic/20210222112957.png" alt="image-20210220122832855" style="zoom:25%;">



<ul>
<li>有免费版和专业版（按年收费）</li>
</ul>
<h1 id="Everything基于名称快速定位文件和文件夹"><a href="#Everything基于名称快速定位文件和文件夹" class="headerlink" title="Everything基于名称快速定位文件和文件夹"></a>Everything 基于名称快速定位文件和文件夹</h1><p><a href="https://www.voidtools.com/zh-cn/">https://www.voidtools.com/zh-cn/</a></p>
<p>Everything” 是 Windows 上一款搜索引擎，它能够基于文件名快速定文件和文件夹位置。</p>
<p>不像 Windows 内置搜索，”Everything” 默认显示电脑上每个文件和文件夹 (就如其名 “Everything”)。您在搜索框输入的关键词将会筛选显示的文件和文件夹。</p>
<p>“Everything” 可以通过搜索函数 content: 来搜索文件内容。文件内容未被索引时，搜索内容将会很慢。</p>
<ul>
<li>免费软件。软件开发维护不易，请考虑<a href="https://www.voidtools.com/zh-cn/donate">捐赠</a>。</li>
</ul>
<h1 id="Snipaste-帮你提高工作效率"><a href="#Snipaste-帮你提高工作效率" class="headerlink" title="Snipaste 帮你提高工作效率"></a>Snipaste 帮你提高工作效率</h1><p><a href="https://zh.snipaste.com/">https://zh.snipaste.com/</a></p>
<p>Snipaste 是一个简单但强大的截图工具，也可以让你将截图贴回到屏幕上！下载并打开 Snipaste，按下 <code>F1</code> 来开始截图，再按 <code>F3</code>，截图就在桌面置顶显示了。就这么简单！</p>
<p>你还可以将剪贴板里的文字或者颜色信息转化为图片窗口，并且将它们进行缩放、旋转、翻转、设为半透明，甚至让鼠标能穿透它们！如果你是程序员、设计师，或者是大部分工作时间都在电脑前，贴图功能将改变你的工作方式、提升工作效率。</p>
<p>Snipaste 使用很简单，但同时也有一些较高级的用法可以进一步提升你的工作效率。感兴趣的话，请抽空读一读<a href="https://docs.snipaste.com/#/zh-cn/">用户手册</a>。</p>
<p>Snipaste 是免费软件，它也很安全，没有广告、不会扫描你的硬盘、更不会上传用户数据，它只做它应该做的事。</p>
<ul>
<li>个人免费（够用了）</li>
<li>专业版需购买，解锁 30 多个功能，Snipaste 2 专业版已经可从 <a href="https://www.microsoft.com/store/apps/9P1WXPKB68KX">微软商店版</a> <strong>内购</strong>获得！定价 99 CNY / 19.99 USD，授权机制为<strong>大版本买断</strong>，即永久使用，子版本免费更新。已购买用户将来可优惠升级到 Snipaste 3</li>
</ul>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>quicker</tag>
      </tags>
  </entry>
  <entry>
    <title>typora+quicker 写博客</title>
    <url>/2021/02/20/typora-quicker%E5%86%99%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h3 id="写博客两种方式："><a href="#写博客两种方式：" class="headerlink" title="写博客两种方式："></a><strong>写博客两种方式：</strong></h3><ol>
<li>Git bash here<ol>
<li> 博客根目录下 ：hexo new 新的博客</li>
<li>在_post 目录自动生成新的博客.md，同时增加了 hexo 博客的开头</li>
<li>再 typora 编辑即可</li>
<li>博客头可修改 \scaffolds\post.md</li>
</ol>
</li>
<li>typora+quicker<ol>
<li> 直接打开 typora 新建文件</li>
<li> quicker 插入博客头</li>
<li>编辑</li>
<li>存于_post 目录</li>
<li>修改博客头动作内容即可插入不同的博客头</li>
</ol>
</li>
</ol>
<h3 id="quicker是个好东西"><a href="#quicker是个好东西" class="headerlink" title="quicker是个好东西"></a>quicker 是个好东西</h3><p><strong>Quicker</strong> 是一个让 <strong>Windows 用户</strong>可以用<strong>最合适的方式</strong>、<strong>最快地</strong>触发想要的<strong>操作</strong>的软件工具，是一个<strong>场景化</strong>的工具箱，也是一个可以<strong>创造和分享新工具</strong>的平台。</p>
<ul>
<li>暂时利用写博客头功能，省去 hexo new blog 命令</li>
<li>安装→注册→运行→鼠标中间或 ctrl+q 激活面板→工具箱→相应动作拖到面板→应用时激活执行</li>
</ul>
<img data-src="https://cdn.jsdelivr.net/gh/netxulei/typora_img/typora-pic/20210222112957.png" alt="image-20210220122832855" style="zoom:25%;">



<ul>
<li>有免费版和专业版（按年收费）</li>
</ul>
]]></content>
      <categories>
        <category>书写博客</category>
      </categories>
      <tags>
        <tag>typora</tag>
        <tag>quicker</tag>
      </tags>
  </entry>
  <entry>
    <title>typora 自动上传图片</title>
    <url>/2021/02/20/typora%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<p>typora 书写 markdown 自动上传图片（两种方式）</p>
<h2 id="一、插件方式-github为例"><a href="#一、插件方式-github为例" class="headerlink" title="一、插件方式(github为例)"></a>一、插件方式 (github 为例)</h2><h3 id="（一）github申请Token"><a href="#（一）github申请Token" class="headerlink" title="（一）github申请Token"></a>（一）github 申请 Token</h3><p>登录 github→Developer settings→Personal access tokens→New personal access token（链接）→Note（typoraimg）→Select scopes（public_repo）最小权限→生成 token：71ba89824e9d8ce5a5a8a06e173465be810b1e91</p>
<h3 id="（二）建立github公共仓库typora-img"><a href="#（二）建立github公共仓库typora-img" class="headerlink" title="（二）建立github公共仓库typora_img"></a>（二）建立 github 公共仓库 typora_img</h3><p>之前需准备 github 用户</p>
<h3 id="（三）下载插件"><a href="#（三）下载插件" class="headerlink" title="（三）下载插件"></a>（三）下载插件</h3><p>该插件是 Thobian 同学开源的插件，仅支持 Windows 系统。该同学的知乎主页 <a href="https://www.zhihu.com/people/thobian%EF%BC%8CGithub">https://www.zhihu.com/people/thobian，Github</a> 主页 <a href="https://github.com/Thobian/typora-plugins-win-img">https://github.com/Thobian/typora-plugins-win-img</a></p>
<h3 id="（四）插件安装"><a href="#（四）插件安装" class="headerlink" title="（四）插件安装"></a>（四）插件安装</h3><p>下载插件 plugins/image 目录拷贝至 typora 安装目录下的 app 中（C:\Program Files\Typora\resources\app）</p>
<h3 id="（五）插件配置"><a href="#（五）插件配置" class="headerlink" title="（五）插件配置"></a>（五）插件配置</h3><h4 id="1-修改app目录下的window-html文件"><a href="#1-修改app目录下的window-html文件" class="headerlink" title="1.修改app目录下的window.html文件"></a>1. 修改 app 目录下的 <code>window.html</code> 文件</h4><p>搜索 <code>&lt;script src="./app/window/frame.js" defer="defer"&gt;&lt;/script&gt;</code> 在其后面加上一行：<code>&lt;script src="./plugins/image/upload.js" defer="defer"&gt;&lt;/script&gt;</code></p>
<p>注：readme 中覆盖 <code>window.html</code> 只是为了引入 <code>./plugins/image/upload.js</code> 文件，但不同版本 window.html 文件可能存在一些差异，不用把下载的 windows.html 覆盖</p>
<h4 id="2-更换图片上传接口地址"><a href="#2-更换图片上传接口地址" class="headerlink" title="2.更换图片上传接口地址"></a>2. 更换图片上传接口地址</h4><p>插件默认会将图片上传到个人站点上（<a href="https://jiebianjia.com/?ref=github">街边价</a>），不能保证一直给大家提供服务，所以按照好插件后，强烈建议你换成自己的图片上传服务器。方法：打开 <code>plugins/image/upload.js</code> 文件，拉到最下面 将最后一行的 <code>$.image.init();</code> 按照下面的说明进行配置（下面代码替换掉）<code>$.image.init();</code> ：</p>
<h5 id="上传到Github——推荐"><a href="#上传到Github——推荐" class="headerlink" title="上传到Github——推荐"></a><strong>上传到 Github—— 推荐</strong></h5><p>还可上传到自建服务器、上传到腾讯云 COS、阿里云 OSS、七牛云、码云等，详见下载的 readme.md</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//注册token的尽量不要跟其他应用共用，同时授予最小权限</span></span><br><span class="line"><span class="comment">//免费+无需自己搭建服务器，是一种不错的方式</span></span><br><span class="line">$.image.init({</span><br><span class="line">    target:<span class="string">'github'</span>,</span><br><span class="line">    quality:<span class="number">1</span>, <span class="comment">//图片压缩开关，1表示原图上传 取值为：0&lt;quality&lt;=1，如果要压缩推荐 0.7</span></span><br><span class="line">    github:{</span><br><span class="line">        Token : <span class="string">'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'</span>, <span class="comment">// 添加一个仅给typora使用的token 授予最小的权限（repo.public_repo） ，添加token：https://github.com/settings/tokens</span></span><br><span class="line">        CommitterName : <span class="string">'nickname'</span>,                         <span class="comment">// 提交人昵称，写你github的昵称</span></span><br><span class="line">        CommitterEmail : <span class="string">'email@mail.com'</span>,                  <span class="comment">// 提交人邮箱，写你github的邮箱</span></span><br><span class="line">        Repository : <span class="string">'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'</span>,      <span class="comment">// github项目名，比如你的项目地址是：https://github.com/Thobian/typora-plugins-win-img  那就是后面的“Thobian/typora-plugins-win-img”</span></span><br><span class="line">        Filepath : <span class="string">'typora'</span>,                                <span class="comment">// 图片在项目中的保存目录，可以不用提前创建目录，github提交时发现没有会自动创建</span></span><br><span class="line">        <span class="comment">// 【注意：开启CDN后会将原github的文件地址换成 jsDelivr 的地址，如出现镜像出现国内无法访问，或者不再继续运营你的图片也将不能访问到，请谨慎开启该功能】</span></span><br><span class="line">        jsDelivrCND : <span class="literal">false</span>,                                <span class="comment">// 是否开启GitHub图片走镜像，国内有时候访问不太方便,如要打开设置为：true</span></span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>
<h4 id="3-图片本地压缩后再上传"><a href="#3-图片本地压缩后再上传" class="headerlink" title="3.图片本地压缩后再上传"></a>3. <strong>图片本地压缩后再上传</strong></h4><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 图片太大可以在本地进行压缩后再上传到服务器</span></span><br><span class="line"><span class="comment">// 感谢 @mgsod 开源的前端压缩代码，仓库地址：https://github.com/mgsod/imgZip</span></span><br><span class="line">$.image.init({</span><br><span class="line">    <span class="comment">//在原配置基础上增加下面配置开关。完整配置示例参考“上传到Github”</span></span><br><span class="line">    <span class="comment">//打开图片压缩开关，1表示原图上传（默认）， 取值为：0&lt;quality&lt;=1，如果要压缩推荐 0.7</span></span><br><span class="line">    quality:<span class="number">0.7</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>
<h4 id="4-配置的关键："><a href="#4-配置的关键：" class="headerlink" title="4.配置的关键："></a>4. 配置的关键：</h4><ol>
<li>Repository：项目名不能带有 https 等，仅仅是后面的 “Thobian/typora-plugins-win-img”</li>
<li> 仓库必须是 public 公共库</li>
<li> typora 偏好设置中，图像选项不勾选第二项 “对网络位置的图片应用上述规则”，否则会重复上传图片</li>
<li>可同时设置内置的图传上传</li>
</ol>
<h3 id="（六）重启typora"><a href="#（六）重启typora" class="headerlink" title="（六）重启typora"></a>（六）重启 typora</h3><h3 id="（七）特点"><a href="#（七）特点" class="headerlink" title="（七）特点"></a>（七）特点</h3><ul>
<li>插入图片、拉入图片、粘贴图片都能自动上传</li>
<li>插件上传的图片自动重新命名，存放在 Filepath + 日期目录中，文件名应该是时间</li>
</ul>
<h2 id="二、typora内置支持图床上传（typora-PicGo-jsdelivr-github）"><a href="#二、typora内置支持图床上传（typora-PicGo-jsdelivr-github）" class="headerlink" title="二、typora内置支持图床上传（typora+PicGo+jsdelivr+github）"></a>二、typora 内置支持图床上传（typora+PicGo+jsdelivr+github）</h2><ul>
<li><p>内置支持 PicGo 上传图片，图床类似插件模式，暂时配置 github</p>
</li>
<li><p>下载 picGo，在 app 里配置，支持 github 等。</p>
</li>
<li><p>Github 图床配合 jsdelivr 的 CDN，才能回显。</p>
</li>
</ul>
<h4 id="（一）PicGo-App的Github图床配置"><a href="#（一）PicGo-App的Github图床配置" class="headerlink" title="（一）PicGo App的Github图床配置"></a>（一）PicGo App 的 Github 图床配置</h4><img data-src="https://cdn.jsdelivr.net/gh/netxulei/typora_img/typora-pic/20210222103824.png" alt="image-20210222103824108" style="zoom: 80%;">

<p>jsDelivr 引用时一般有个版本号，不用版本号默认使用最新版本的仓库。</p>
<p>github 仓库可以点击 Release，新建一个版本，在上面的小方框里面填写你的版本号，尽量填写数字，例如 <code>1.0</code> 之类的，不要用中文！！！也可以不用建立 release</p>
<h3 id="（二）typora的使用PicGo的偏好配置"><a href="#（二）typora的使用PicGo的偏好配置" class="headerlink" title="（二）typora的使用PicGo的偏好配置"></a>（二）typora 的使用 PicGo 的偏好配置</h3><img data-src="https://cdn.jsdelivr.net/gh/netxulei/typora_img/typora-pic/20210222104001.png" alt="image-20210222104001681" style="zoom:50%;">

<p>1.typora 偏好设置中，图像选项插入图片时选择 “上传图片”</p>
<p>2. 上传服务设定不要忘了 PicGo 的路径</p>
<h3 id="（三）特点："><a href="#（三）特点：" class="headerlink" title="（三）特点："></a>（三）特点：</h3><ul>
<li><p>插入图片、拉入图片、粘贴图片都能自动上传</p>
</li>
<li><p>上传成功后文章和相册都不显示（github 图床），可能需要梯子，jsDelivr 可以解决。</p>
</li>
<li><p>filepath 设置后应加 /，否则上传的图片不保存该在目录下，而是根目录下，文件名为 Filepath + 原文件名</p>
</li>
<li><p>同名的图片上传会失败，可在 PicGo 设置中打开上传前重命名开关，但是手动命名，较麻烦。可以关闭重命名开关，打开时间戳重命名开关</p>
</li>
</ul>
<h3 id="（四）与插件的冲突或协作"><a href="#（四）与插件的冲突或协作" class="headerlink" title="（四）与插件的冲突或协作"></a>（四）与插件的冲突或协作</h3><ul>
<li>PicGo 先上传成功后，插件就不上传了，因为地址已不是本地地址</li>
<li>只有 PicGo 上传还未成功时，如正在命名过程中，插件再上传。或 Pic 上传不成功时，插件继续上传成功。基本上 PicGo 关闭重命名开关，打开时间戳命名开关，即基本能上传成功时，就没有插件的事了。</li>
<li>PicGo 配合 jsDelivr 速度还可以，暂时不用插件方式（仅仅恢复 app 目录下的 window.html 即可）。</li>
</ul>
]]></content>
      <categories>
        <category>typora图片</category>
      </categories>
      <tags>
        <tag>typora</tag>
        <tag>PicGo</tag>
        <tag>jsdelivr</tag>
      </tags>
  </entry>
  <entry>
    <title>php7.3 编译安装参数</title>
    <url>/2021/03/22/php7-3%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">spms@ZFQS:~/php-7.3.27&gt; ./configure -h</span><br><span class="line">`configure' configures this package to adapt to many kinds of systems.</span><br><span class="line"></span><br><span class="line">Usage: ./configure [OPTION]... [VAR=VALUE]...</span><br><span class="line"></span><br><span class="line">To assign environment variables (e.g., CC, CFLAGS...), specify them as</span><br><span class="line">VAR=VALUE.  See below for descriptions of some of the useful variables.</span><br><span class="line"></span><br><span class="line">Defaults for the options are specified in brackets.</span><br><span class="line"></span><br><span class="line">Configuration:</span><br><span class="line">  -h, --help              display this help and exit</span><br><span class="line">      --help=short        display options specific to this package</span><br><span class="line">      --help=recursive    display the short help of all the included packages</span><br><span class="line">  -V, --version           display version information and exit</span><br><span class="line">  -q, --quiet, --silent   do not print `checking ...' messages</span><br><span class="line">      --cache-file=FILE   cache test results in FILE [disabled]</span><br><span class="line">  -C, --config-cache      alias for `--cache-file=config.cache'</span><br><span class="line">  -n, --no-create         do not create output files</span><br><span class="line">      --srcdir=DIR        find the sources in DIR [configure dir or `..']</span><br><span class="line"></span><br><span class="line">Installation directories:</span><br><span class="line">  --prefix=PREFIX         install architecture-independent files in PREFIX</span><br><span class="line">                          [/usr/local]</span><br><span class="line">  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX</span><br><span class="line">                          [PREFIX]</span><br><span class="line"></span><br><span class="line">By default, `make install' will install all the files in</span><br><span class="line">`/usr/local/bin', `/usr/local/lib' etc.  You can specify</span><br><span class="line">an installation prefix other than `/usr/local' using `--prefix',</span><br><span class="line">for instance `--prefix=$HOME'.</span><br><span class="line"></span><br><span class="line">For better control, use the options below.</span><br><span class="line"></span><br><span class="line">Fine tuning of the installation directories:</span><br><span class="line">  --bindir=DIR            user executables [EPREFIX/bin]</span><br><span class="line">  --sbindir=DIR           system admin executables [EPREFIX/sbin]</span><br><span class="line">  --libexecdir=DIR        program executables [EPREFIX/libexec]</span><br><span class="line">  --sysconfdir=DIR        read-only single-machine data [PREFIX/etc]</span><br><span class="line">  --sharedstatedir=DIR    modifiable architecture-independent data [PREFIX/com]</span><br><span class="line">  --localstatedir=DIR     modifiable single-machine data [PREFIX/var]</span><br><span class="line">  --runstatedir=DIR       modifiable per-process data [LOCALSTATEDIR/run]</span><br><span class="line">  --libdir=DIR            object code libraries [EPREFIX/lib]</span><br><span class="line">  --includedir=DIR        C header files [PREFIX/include]</span><br><span class="line">  --oldincludedir=DIR     C header files for non-gcc [/usr/include]</span><br><span class="line">  --datarootdir=DIR       read-only arch.-independent data root [PREFIX/share]</span><br><span class="line">  --datadir=DIR           read-only architecture-independent data [DATAROOTDIR]</span><br><span class="line">  --infodir=DIR           info documentation [DATAROOTDIR/info]</span><br><span class="line">  --localedir=DIR         locale-dependent data [DATAROOTDIR/locale]</span><br><span class="line">  --mandir=DIR            man documentation [DATAROOTDIR/man]</span><br><span class="line">  --docdir=DIR            documentation root [DATAROOTDIR/doc/PACKAGE]</span><br><span class="line">  --htmldir=DIR           html documentation [DOCDIR]</span><br><span class="line">  --dvidir=DIR            dvi documentation [DOCDIR]</span><br><span class="line">  --pdfdir=DIR            pdf documentation [DOCDIR]</span><br><span class="line">  --psdir=DIR             ps documentation [DOCDIR]</span><br><span class="line"></span><br><span class="line">System types:</span><br><span class="line">  --build=BUILD     configure for building on BUILD [guessed]</span><br><span class="line">  --host=HOST       cross-compile to build programs to run on HOST [BUILD]</span><br><span class="line">  --target=TARGET   configure for building compilers for TARGET [HOST]</span><br><span class="line"></span><br><span class="line">Optional Features and Packages:</span><br><span class="line">  --disable-option-checking  ignore unrecognized --enable/--with options</span><br><span class="line">  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)</span><br><span class="line">  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]</span><br><span class="line">  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]</span><br><span class="line">  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)</span><br><span class="line">  --with-libdir=NAME      Look for libraries in .../NAME rather than .../lib</span><br><span class="line">  --disable-rpath         Disable passing additional runtime library</span><br><span class="line">                          search paths</span><br><span class="line">  --enable-re2c-cgoto     Enable -g flag to re2c to use computed goto gcc extension</span><br><span class="line">  --disable-gcc-global-regs</span><br><span class="line">                          whether to enable GCC global register variables</span><br><span class="line"></span><br><span class="line">SAPI modules:</span><br><span class="line"></span><br><span class="line">  --with-apxs2=FILE       Build shared Apache 2.0 Handler module. FILE is the optional</span><br><span class="line">                          pathname to the Apache apxs tool apxs</span><br><span class="line">  --disable-cli           Disable building CLI version of PHP</span><br><span class="line">                          (this forces --without-pear)</span><br><span class="line">  --enable-embed=TYPE     EXPERIMENTAL: Enable building of embedded SAPI library</span><br><span class="line">                          TYPE is either 'shared' or 'static'. TYPE=shared</span><br><span class="line">  --enable-fpm            Enable building of the fpm SAPI executable</span><br><span class="line">  --with-fpm-user=USER    Set the user for php-fpm to run as. (default: nobody)</span><br><span class="line">  --with-fpm-group=GRP    Set the group for php-fpm to run as. For a system user, this</span><br><span class="line">                          should usually be set to match the fpm username (default: nobody)</span><br><span class="line">  --with-fpm-systemd      Activate systemd integration</span><br><span class="line">  --with-fpm-acl          Use POSIX Access Control Lists</span><br><span class="line">  --with-litespeed        Build PHP as litespeed module</span><br><span class="line">  --enable-phpdbg         Build phpdbg</span><br><span class="line">  --enable-phpdbg-webhelper</span><br><span class="line">                          Build phpdbg web SAPI support</span><br><span class="line">  --enable-phpdbg-debug   Build phpdbg in debug mode</span><br><span class="line">  --enable-phpdbg-readline   Enable readline support in phpdbg (depends on static ext/readline)</span><br><span class="line">  --disable-cgi           Disable building CGI version of PHP</span><br><span class="line">  --with-valgrind=DIR     Enable valgrind support</span><br><span class="line"></span><br><span class="line">General settings:</span><br><span class="line"></span><br><span class="line">  --enable-gcov           Enable GCOV code coverage (requires LTP) - FOR DEVELOPERS ONLY!!</span><br><span class="line">  --enable-debug          Compile with debugging symbols</span><br><span class="line">  --with-layout=TYPE      Set how installed files will be laid out.  Type can</span><br><span class="line">                          be either PHP or GNU [PHP]</span><br><span class="line">  --with-config-file-path=PATH</span><br><span class="line">                          Set the path in which to look for php.ini [PREFIX/lib]</span><br><span class="line">  --with-config-file-scan-dir=PATH</span><br><span class="line">                          Set the path where to scan for configuration files</span><br><span class="line">  --enable-sigchild       Enable PHP's own SIGCHLD handler</span><br><span class="line">  --enable-libgcc         Enable explicitly linking against libgcc</span><br><span class="line">  --disable-short-tags    Disable the short-form &lt;? start tag by default</span><br><span class="line">  --enable-dmalloc        Enable dmalloc</span><br><span class="line">  --disable-ipv6          Disable IPv6 support</span><br><span class="line">  --enable-dtrace         Enable DTrace support</span><br><span class="line">  --enable-fd-setsize     Set size of descriptor sets</span><br><span class="line"></span><br><span class="line">Extensions:</span><br><span class="line"></span><br><span class="line">  --with-EXTENSION=shared[,PATH]</span><br><span class="line"></span><br><span class="line">    NOTE: Not all extensions can be build as 'shared'.</span><br><span class="line">    </span><br><span class="line">    Example: --with-foobar=shared,/usr/local/foobar/</span><br><span class="line">    </span><br><span class="line">      o Builds the foobar extension as shared extension.</span><br><span class="line">      o foobar package install prefix is /usr/local/foobar/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  --disable-all           Disable all extensions which are enabled by default</span><br><span class="line"></span><br><span class="line">  --disable-libxml        Disable LIBXML support</span><br><span class="line">  --with-libxml-dir=DIR   LIBXML: libxml2 install prefix</span><br><span class="line">  --with-openssl=DIR      Include OpenSSL support (requires OpenSSL &gt;= 1.0.1)</span><br><span class="line">  --with-kerberos=DIR     OPENSSL: Include Kerberos support</span><br><span class="line">  --with-system-ciphers   OPENSSL: Use system default cipher list instead of hardcoded value</span><br><span class="line">  --with-pcre-regex=DIR   Include Perl Compatible Regular Expressions support.</span><br><span class="line">                          DIR is the PCRE install prefix BUNDLED</span><br><span class="line">  --with-pcre-jit         Enable PCRE JIT functionality (BUNDLED only)</span><br><span class="line">  --with-pcre-valgrind=DIR</span><br><span class="line">                          Enable PCRE valgrind support. Developers only!</span><br><span class="line">  --without-sqlite3=DIR   Do not include SQLite3 support. DIR is the prefix to</span><br><span class="line">                          SQLite3 installation directory.</span><br><span class="line">  --with-zlib=DIR         Include ZLIB support (requires zlib &gt;= 1.2.0.4)</span><br><span class="line">  --with-zlib-dir=&lt;DIR&gt;   Define the location of zlib install directory</span><br><span class="line">  --enable-bcmath         Enable bc style precision math functions</span><br><span class="line">  --with-bz2=DIR          Include BZip2 support</span><br><span class="line">  --enable-calendar       Enable support for calendar conversion</span><br><span class="line">  --disable-ctype         Disable ctype functions</span><br><span class="line">  --with-curl=DIR         Include cURL support</span><br><span class="line">  --enable-dba            Build DBA with bundled modules. To build shared DBA</span><br><span class="line">                          extension use --enable-dba=shared</span><br><span class="line">  --with-qdbm=DIR         DBA: QDBM support</span><br><span class="line">  --with-gdbm=DIR         DBA: GDBM support</span><br><span class="line">  --with-ndbm=DIR         DBA: NDBM support</span><br><span class="line">  --with-db4=DIR          DBA: Oracle Berkeley DB 4.x or 5.x support</span><br><span class="line">  --with-db3=DIR          DBA: Oracle Berkeley DB 3.x support</span><br><span class="line">  --with-db2=DIR          DBA: Oracle Berkeley DB 2.x support</span><br><span class="line">  --with-db1=DIR          DBA: Oracle Berkeley DB 1.x support/emulation</span><br><span class="line">  --with-dbm=DIR          DBA: DBM support</span><br><span class="line">  --with-tcadb=DIR        DBA: Tokyo Cabinet abstract DB support</span><br><span class="line">  --with-lmdb=DIR         DBA: Lightning memory-mapped database support</span><br><span class="line">  --without-cdb=DIR       DBA: CDB support (bundled)</span><br><span class="line">  --disable-inifile       DBA: INI support (bundled)</span><br><span class="line">  --disable-flatfile      DBA: FlatFile support (bundled)</span><br><span class="line">  --disable-dom           Disable DOM support</span><br><span class="line">  --with-libxml-dir=DIR   DOM: libxml2 install prefix</span><br><span class="line">  --with-enchant=DIR      Include enchant support.</span><br><span class="line">                          GNU Aspell version 1.1.3 or higher required.</span><br><span class="line">  --enable-exif           Enable EXIF (metadata from images) support</span><br><span class="line">  --disable-fileinfo      Disable fileinfo support</span><br><span class="line">  --disable-filter        Disable input filter support</span><br><span class="line">  --with-pcre-dir         FILTER: pcre install prefix</span><br><span class="line">  --enable-ftp            Enable FTP support</span><br><span class="line">  --with-openssl-dir=DIR  FTP: openssl install prefix</span><br><span class="line">  --with-gd=DIR           Include GD support.  DIR is the GD library base</span><br><span class="line">                          install directory BUNDLED</span><br><span class="line">  --with-webp-dir=DIR     GD: Set the path to libwebp install prefix</span><br><span class="line">  --with-jpeg-dir=DIR     GD: Set the path to libjpeg install prefix</span><br><span class="line">  --with-png-dir=DIR      GD: Set the path to libpng install prefix</span><br><span class="line">  --with-zlib-dir=DIR     GD: Set the path to libz install prefix</span><br><span class="line">  --with-xpm-dir=DIR      GD: Set the path to libXpm install prefix</span><br><span class="line">  --with-freetype-dir=DIR GD: Set the path to FreeType 2 install prefix</span><br><span class="line">  --enable-gd-jis-conv    GD: Enable JIS-mapped Japanese font support</span><br><span class="line">  --with-gettext=DIR      Include GNU gettext support</span><br><span class="line">  --with-gmp=DIR          Include GNU MP support</span><br><span class="line">  --with-mhash=DIR        Include mhash support</span><br><span class="line">  --disable-hash          Disable hash support</span><br><span class="line">  --without-iconv=DIR     Exclude iconv support</span><br><span class="line">  --with-imap=DIR         Include IMAP support. DIR is the c-client install prefix</span><br><span class="line">  --with-kerberos=DIR     IMAP: Include Kerberos support. DIR is the Kerberos install prefix</span><br><span class="line">  --with-imap-ssl=DIR     IMAP: Include SSL support. DIR is the OpenSSL install prefix</span><br><span class="line">  --with-interbase=DIR    Include Firebird support.  DIR is the Firebird base</span><br><span class="line">                          install directory /opt/firebird</span><br><span class="line">  --enable-intl           Enable internationalization support</span><br><span class="line">  --with-icu-dir=DIR      Specify where ICU libraries and headers can be found</span><br><span class="line">  --disable-json          Disable JavaScript Object Serialization support</span><br><span class="line">  --with-ldap=DIR         Include LDAP support</span><br><span class="line">  --with-ldap-sasl=DIR    LDAP: Include Cyrus SASL support</span><br><span class="line">  --enable-mbstring       Enable multibyte string support</span><br><span class="line">  --disable-mbregex       MBSTRING: Disable multibyte regex support</span><br><span class="line">  --disable-mbregex-backtrack</span><br><span class="line">                          MBSTRING: Disable multibyte regex backtrack check</span><br><span class="line">  --with-onig=DIR         MBSTRING: Use external oniguruma. DIR is the oniguruma install prefix.</span><br><span class="line">                          If DIR is not set, the bundled oniguruma will be used</span><br><span class="line">  --with-mysqli=FILE      Include MySQLi support.  FILE is the path</span><br><span class="line">                          to mysql_config.  If no value or mysqlnd is passed</span><br><span class="line">                          as FILE, the MySQL native driver will be used</span><br><span class="line">  --enable-embedded-mysqli</span><br><span class="line">                          MYSQLi: Enable embedded support</span><br><span class="line">                          Note: Does not work with MySQL native driver!</span><br><span class="line">  --with-mysql-sock=SOCKPATH</span><br><span class="line">                          MySQLi/PDO_MYSQL: Location of the MySQL unix socket pointer.</span><br><span class="line">                          If unspecified, the default locations are searched</span><br><span class="line">  --with-oci8=DIR         Include Oracle Database OCI8 support. DIR defaults to $ORACLE_HOME.</span><br><span class="line">                          Use --with-oci8=instantclient,/path/to/instant/client/lib</span><br><span class="line">                          to use an Oracle Instant Client installation</span><br><span class="line">  --with-odbcver=HEX      Force support for the passed ODBC version. A hex number is expected, default 0x0350.</span><br><span class="line">                          Use the special value of 0 to prevent an explicit ODBCVER to be defined.</span><br><span class="line">  --with-adabas=DIR       Include Adabas D support /usr/local</span><br><span class="line">  --with-sapdb=DIR        Include SAP DB support /usr/local</span><br><span class="line">  --with-solid=DIR        Include Solid support /usr/local/solid</span><br><span class="line">  --with-ibm-db2=DIR      Include IBM DB2 support /home/db2inst1/sqllib</span><br><span class="line">  --with-empress=DIR      Include Empress support \$EMPRESSPATH</span><br><span class="line">                          (Empress Version &gt;= 8.60 required)</span><br><span class="line">  --with-empress-bcs=DIR  Include Empress Local Access support \$EMPRESSPATH</span><br><span class="line">                          (Empress Version &gt;= 8.60 required)</span><br><span class="line">  --with-custom-odbc=DIR  Include user defined ODBC support. DIR is ODBC install base</span><br><span class="line">                          directory /usr/local. Make sure to define CUSTOM_ODBC_LIBS and</span><br><span class="line">                          have some odbc.h in your include dirs. f.e. you should define</span><br><span class="line">                          following for Sybase SQL Anywhere 5.5.00 on QNX, prior to</span><br><span class="line">                          running this configure script:</span><br><span class="line">                            CPPFLAGS=\"-DODBC_QNX -DSQLANY_BUG\"</span><br><span class="line">                            LDFLAGS=-lunix</span><br><span class="line">                            CUSTOM_ODBC_LIBS=\"-ldblib -lodbc\"</span><br><span class="line">  --with-iodbc=DIR        Include iODBC support /usr/local</span><br><span class="line">  --with-esoob=DIR        Include Easysoft OOB support /usr/local/easysoft/oob/client</span><br><span class="line">  --with-unixODBC=DIR     Include unixODBC support /usr/local</span><br><span class="line">  --with-dbmaker=DIR      Include DBMaker support</span><br><span class="line">  --disable-opcache       Disable Zend OPcache support</span><br><span class="line">  --disable-opcache-file  Disable file based caching</span><br><span class="line">  --disable-huge-code-pages</span><br><span class="line">                          Disable copying PHP CODE pages into HUGE PAGES</span><br><span class="line">  --enable-pcntl          Enable pcntl support (CLI/CGI only)</span><br><span class="line">  --disable-pdo           Disable PHP Data Objects support</span><br><span class="line">  --with-pdo-dblib=DIR    PDO: DBLIB-DB support.  DIR is the FreeTDS home directory</span><br><span class="line">  --with-pdo-firebird=DIR PDO: Firebird support.  DIR is the Firebird base</span><br><span class="line">                          install directory /opt/firebird</span><br><span class="line">  --with-pdo-mysql=DIR    PDO: MySQL support. DIR is the MySQL base directory</span><br><span class="line">                          If no value or mysqlnd is passed as DIR, the</span><br><span class="line">                          MySQL native driver will be used</span><br><span class="line">  --with-zlib-dir=DIR     PDO_MySQL: Set the path to libz install prefix</span><br><span class="line">  --with-pdo-oci=DIR      PDO: Oracle OCI support. DIR defaults to $ORACLE_HOME.</span><br><span class="line">                          Use --with-pdo-oci=instantclient,/path/to/instant/client/lib</span><br><span class="line">                          for an Oracle Instant Client installation.</span><br><span class="line">  --with-pdo-odbc=flavour,dir</span><br><span class="line">                          PDO: Support for 'flavour' ODBC driver.</span><br><span class="line">                          include and lib dirs are looked for under 'dir'.</span><br><span class="line"></span><br><span class="line">                          'flavour' can be one of:  ibm-db2, iODBC, unixODBC, generic</span><br><span class="line">                          If ',dir' part is omitted, default for the flavour</span><br><span class="line">                          you have selected will be used. e.g.:</span><br><span class="line">    </span><br><span class="line">                            --with-pdo-odbc=unixODBC</span><br><span class="line">    </span><br><span class="line">                          will check for unixODBC under /usr/local. You may attempt</span><br><span class="line">                          to use an otherwise unsupported driver using the 'generic'</span><br><span class="line">                          flavour.  The syntax for generic ODBC support is:</span><br><span class="line">    </span><br><span class="line">                            --with-pdo-odbc=generic,dir,libname,ldflags,cflags</span><br><span class="line">    </span><br><span class="line">                          When built as 'shared' the extension filename is always pdo_odbc.so</span><br><span class="line"></span><br><span class="line">  --with-pdo-pgsql=DIR    PDO: PostgreSQL support.  DIR is the PostgreSQL base</span><br><span class="line">                          install directory or the path to pg_config</span><br><span class="line">  --without-pdo-sqlite=DIR</span><br><span class="line">                          PDO: sqlite 3 support.  DIR is the sqlite base</span><br><span class="line">                          install directory BUNDLED</span><br><span class="line">  --with-pgsql=DIR        Include PostgreSQL support.  DIR is the PostgreSQL</span><br><span class="line">                          base install directory or the path to pg_config</span><br><span class="line">  --disable-phar          Disable phar support</span><br><span class="line">  --disable-posix         Disable POSIX-like functions</span><br><span class="line">  --with-pspell=DIR       Include PSPELL support.</span><br><span class="line">                          GNU Aspell version 0.50.0 or higher required</span><br><span class="line">  --with-libedit=DIR      Include libedit readline replacement (CLI/CGI only)</span><br><span class="line">  --with-readline=DIR     Include readline support (CLI/CGI only)</span><br><span class="line">  --with-recode=DIR       Include recode support</span><br><span class="line">  --disable-session       Disable session support</span><br><span class="line">  --with-mm=DIR           SESSION: Include mm support for session storage</span><br><span class="line">  --enable-shmop          Enable shmop support</span><br><span class="line">  --disable-simplexml     Disable SimpleXML support</span><br><span class="line">  --with-libxml-dir=DIR   SimpleXML: libxml2 install prefix</span><br><span class="line">  --with-snmp=DIR         Include SNMP support</span><br><span class="line">  --with-openssl-dir=DIR  SNMP: openssl install prefix</span><br><span class="line">  --enable-soap           Enable SOAP support</span><br><span class="line">  --with-libxml-dir=DIR   SOAP: libxml2 install prefix</span><br><span class="line">  --enable-sockets        Enable sockets support</span><br><span class="line">  --with-sodium=DIR       Include sodium support</span><br><span class="line">  --with-password-argon2=DIR</span><br><span class="line">                          Include Argon2 support in password_*. DIR is the Argon2 shared library path</span><br><span class="line">  --enable-sysvmsg        Enable sysvmsg support</span><br><span class="line">  --enable-sysvsem        Enable System V semaphore support</span><br><span class="line">  --enable-sysvshm        Enable the System V shared memory support</span><br><span class="line">  --with-tidy=DIR         Include TIDY support</span><br><span class="line">  --disable-tokenizer     Disable tokenizer support</span><br><span class="line">  --enable-wddx           Enable WDDX support</span><br><span class="line">  --with-libxml-dir=DIR   WDDX: libxml2 install prefix</span><br><span class="line">  --with-libexpat-dir=DIR WDDX: libexpat dir for XMLRPC-EPI (deprecated)</span><br><span class="line">  --disable-xml           Disable XML support</span><br><span class="line">  --with-libxml-dir=DIR   XML: libxml2 install prefix</span><br><span class="line">  --with-libexpat-dir=DIR XML: libexpat install prefix (deprecated)</span><br><span class="line">  --disable-xmlreader     Disable XMLReader support</span><br><span class="line">  --with-libxml-dir=DIR   XMLReader: libxml2 install prefix</span><br><span class="line">  --with-xmlrpc=DIR       Include XMLRPC-EPI support</span><br><span class="line">  --with-libxml-dir=DIR   XMLRPC-EPI: libxml2 install prefix</span><br><span class="line">  --with-libexpat-dir=DIR XMLRPC-EPI: libexpat dir for XMLRPC-EPI (deprecated)</span><br><span class="line">  --with-iconv-dir=DIR    XMLRPC-EPI: iconv dir for XMLRPC-EPI</span><br><span class="line">  --disable-xmlwriter     Disable XMLWriter support</span><br><span class="line">  --with-libxml-dir=DIR   XMLWriter: libxml2 install prefix</span><br><span class="line">  --with-xsl=DIR          Include XSL support.  DIR is the libxslt base</span><br><span class="line">                          install directory (libxslt &gt;= 1.1.0 required)</span><br><span class="line">  --enable-zend-test      Enable zend-test extension</span><br><span class="line">  --enable-zip            Include Zip read/write support</span><br><span class="line">  --with-zlib-dir=DIR     ZIP: Set the path to libz install prefix</span><br><span class="line">  --with-pcre-dir         ZIP: pcre install prefix</span><br><span class="line">  --with-libzip=DIR       ZIP: use libzip</span><br><span class="line">  --enable-mysqlnd        Enable mysqlnd explicitly, will be done implicitly</span><br><span class="line">                          when required by other extensions</span><br><span class="line">  --disable-mysqlnd-compression-support</span><br><span class="line">                          Disable support for the MySQL compressed protocol in mysqlnd</span><br><span class="line">  --with-zlib-dir=DIR     mysqlnd: Set the path to libz install prefix</span><br><span class="line"></span><br><span class="line">PEAR:</span><br><span class="line"></span><br><span class="line">  --with-pear=DIR         Install PEAR in DIR [PREFIX/lib/php]</span><br><span class="line">  --without-pear          Do not install PEAR</span><br><span class="line"></span><br><span class="line">Zend:</span><br><span class="line"></span><br><span class="line">  --enable-maintainer-zts Enable thread safety - for code maintainers only!!</span><br><span class="line">  --disable-inline-optimization</span><br><span class="line">                          If building zend_execute.lo fails, try this switch</span><br><span class="line">  --disable-zend-signals  whether to enable zend signal handling</span><br><span class="line"></span><br><span class="line">TSRM:</span><br><span class="line"></span><br><span class="line">  --with-tsrm-pth=pth-config</span><br><span class="line">                          Use GNU Pth</span><br><span class="line">  --with-tsrm-st          Use SGI's State Threads</span><br><span class="line">  --with-tsrm-pthreads    Use POSIX threads (default)</span><br><span class="line"></span><br><span class="line">Libtool:</span><br><span class="line"></span><br><span class="line">  --enable-shared=PKGS    Build shared libraries default=yes</span><br><span class="line">  --enable-static=PKGS    Build static libraries default=yes</span><br><span class="line">  --enable-fast-install=PKGS</span><br><span class="line">                          Optimize for fast installation default=yes</span><br><span class="line">  --with-gnu-ld           Assume the C compiler uses GNU ld default=no</span><br><span class="line">  --disable-libtool-lock  Avoid locking (might break parallel builds)</span><br><span class="line">  --with-pic              Try to use only PIC/non-PIC objects default=use both</span><br><span class="line">  --with-tags=TAGS        Include additional configurations automatic</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Some influential environment variables:</span><br><span class="line">  CC          C compiler command</span><br><span class="line">  CFLAGS      C compiler flags</span><br><span class="line">  LDFLAGS     linker flags, e.g. -L&lt;lib dir&gt; if you have libraries in a</span><br><span class="line">              nonstandard directory &lt;lib dir&gt;</span><br><span class="line">  LIBS        libraries to pass to the linker, e.g. -l&lt;library&gt;</span><br><span class="line">  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I&lt;include dir&gt; if</span><br><span class="line">              you have headers in a nonstandard directory &lt;include dir&gt;</span><br><span class="line">  CPP         C preprocessor</span><br><span class="line">  YACC        The `Yet Another Compiler Compiler' implementation to use.</span><br><span class="line">              Defaults to the first program found out of: `bison -y', `byacc',</span><br><span class="line">              `yacc'.</span><br><span class="line">  YFLAGS      The list of arguments that will be passed by default to $YACC.</span><br><span class="line">              This script will default YFLAGS to the empty string to avoid a</span><br><span class="line">              default value of `-d' given by some make applications.</span><br><span class="line">  CXX         C++ compiler command</span><br><span class="line">  CXXFLAGS    C++ compiler flags</span><br><span class="line">  CXXCPP      C++ preprocessor</span><br><span class="line"></span><br><span class="line">Use these variables to override the choices made by `configure' or to help</span><br><span class="line">it to find libraries and programs with nonstandard names/locations.</span><br><span class="line"></span><br><span class="line">Report bugs to the package provider.</span><br><span class="line">spms@ZFQS:~/php-7.3.27&gt; </span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>编译参数</tag>
      </tags>
  </entry>
  <entry>
    <title>Git+node.js+hexo+（GitHub 或 Gitee）创建博客</title>
    <url>/2021/02/20/%E6%9C%AC%E5%8D%9A%E5%88%9B%E5%BB%BA%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="一、Github和Gitee提供的page服务"><a href="#一、Github和Gitee提供的page服务" class="headerlink" title="一、Github和Gitee提供的page服务"></a>一、Github 和 Gitee 提供的 page 服务</h2><p>（一） Github Pages </p>
<p>其实本身就是 Github 提供的博客服务。在 Github 中创建一个特定格式的 Repository，Github Pages 就会将里面的信息生成一个网页，展示出来。</p>
<p><strong>操作如下：</strong></p>
<ol>
<li>注册 Github 账号，然后在 Github 中创建一个以 .github.io 结尾的 Repository（注：可以创建多个 Repositry，但作为博客 name 的前缀必须与账号相同，如 netxulei.github.io ，即只能用这种命名方式创建 GitHub Pages 网站）。<ol>
<li>Repository name: netxulei.github.io</li>
<li> 勾选 Initialize this repository with a README</li>
<li>Create repository</li>
</ol>
</li>
<li> 简单地编辑一下 README.md 这个文档。 比如添加：I am trying to create my own blog.. 保存 (Commit changes)。</li>
<li>打开网页：netxulei.github.io 这里就可以看到 README.md 里的内容了。</li>
</ol>
<p>如果没有太多的要求，其实直接用 README.md 来写博客也是不错的。</p>
<p>这个生成好的 Repository 就是用来存放博客内容的地方，也只有这个仓库里的内容，才会被 netxulei.github.io 这个网页显示出来。</p>
<p>（二）Gitee Pages</p>
<p>1. 申请码云账户，新建仓库，打开 pages 服务<br>注意：仓库名，公开访问权限，语言为 JavaScript，仓库名 netxulei 必须与你注册 github 或 gitee 的注册名 netxulei 相同，不然 css 路径会读错。</p>
<p><img data-src="https://i.loli.net/2021/04/15/pmVgMsfLrOIRHnk.png" alt="image-20210415114333908"></p>
<p><img data-src="https://i.loli.net/2021/04/15/RTLAopg8Xij4MJO.png" alt="image-20210415114612052"></p>
<p>●GitHub 与 Gitee 发布博客的区别：</p>
<p>GitHub：hexo d 发布后，博客可直接访问</p>
<p>Gitee：hexo d 发布后，还需到 pages 的服务更新后，博客才能访问。</p>
<p><img data-src="https://i.loli.net/2021/04/15/ATcPwRYsmLtUEuv.png" alt="image-20210415114937764"></p>
<h2 id="二、安装Git"><a href="#二、安装Git" class="headerlink" title="二、安装Git"></a>二、安装 Git</h2><ul>
<li><p>前往 <a href="https://git-scm.com/">https://git-scm.com/</a></p>
</li>
<li><p> 点击 Downloads</p>
</li>
<li><p>点击 Windows</p>
</li>
<li><p>一般情况，下载会自动开始。如果没有，就点击 click here to download manually</p>
</li>
<li><p>安装</p>
</li>
<li><p>打开 Command Prompt， 输入 <code>git --version</code></p>
</li>
<li><p>得到：git version 2.15.0.windows.1</p>
<p>安装成功</p>
<p>额外说明：如果 Git –version 指令不管用，可能需要到 Environment Variable 那里添加 Path。</p>
</li>
</ul>
<h2 id="三、安装node-js"><a href="#三、安装node-js" class="headerlink" title="三、安装node.js"></a>三、安装 node.js</h2><p>Node.js 就是运行在服务端的 JavaScript。Node.js 是一个基于 Chrome JavaScript 运行时建立的一个平台。Node.js 是一个事件驱动 I/O 服务端 JavaScript 环境，基于 Google 的 V8 引擎，V8 引擎执行 Javascript 的速度非常快，性能非常好。</p>
<h3 id="（一）Nodejs历史版本下载地址"><a href="#（一）Nodejs历史版本下载地址" class="headerlink" title="（一）Nodejs历史版本下载地址"></a>（一）Nodejs 历史版本下载地址</h3><p>官网:<a href="https://nodejs.org/en/download/releases/">https://nodejs.org/en/download/releases/</a></p>
<p>阿里镜像:<a href="https://npm.taobao.org/mirrors/nodenvm/">https://npm.taobao.org/mirrors/nodenvm/</a></p>
<h3 id="（二）下直接安装（windwos或Linux）"><a href="#（二）下直接安装（windwos或Linux）" class="headerlink" title="（二）下直接安装（windwos或Linux）"></a>（二）下直接安装（windwos 或 Linux）</h3><ul>
<li><p>官网下载后执行 exe 文件安装，但有个缺陷，不同版本的 nodejs 无法顺利的切换。</p>
</li>
<li><p>？linux 开发环境时再查询学习</p>
</li>
</ul>
<h3 id="（三）NVM安装nodejs的方法"><a href="#（三）NVM安装nodejs的方法" class="headerlink" title="（三）NVM安装nodejs的方法"></a>（三）NVM 安装 nodejs 的方法</h3><ul>
<li><p><strong>选择</strong>不直接安装 Node.js，而是通过 NVM。windows 和 linux 都支持？</p>
</li>
<li><p>nvm 全名 node.js version management，是一个 windows 下 node 的版本管理工具。<strong>主要用途是安装和切换 nodejs 版本</strong>。如果想使用最新的流行版本测试您正在开发的模块，而不用卸载稳定版本的 node，则可以使用 nvm 来切换 nodejs 版本。</p>
</li>
<li><p>NVM 可以帮助我们快速切换 node 版本。</p>
</li>
<li><p><strong>linux 下 n 模块可管理 node 版本，但不支持 windows，linux 开发环境下需要时再另外查询</strong>。</p>
</li>
</ul>
<h4 id="使用命令时注意"><a href="#使用命令时注意" class="headerlink" title="使用命令时注意"></a>使用命令时注意</h4><ul>
<li><p><strong>请用管理员身份运行命令管理器</strong>，否则可能出错。</p>
</li>
<li><p>先设置 <a href="https://npm.taobao.org/mirrors/node/">node</a> 和 <a href="https://npm.taobao.org/mirrors/npm/">npm</a> 的淘宝镜像，这样成功率和下载速度会更高点。</p>
</li>
<li><p>nvm 安装目录，最好不要存在空格。否则，nvm 可以安装成功，但使用 nvm use x.y.z（nodejs 的切换）会有问题。</p>
</li>
<li><p>有些全局的 npm 模块，可能在各版本的 node.js 之间不共享。</p>
</li>
<li><p>正在使用的 node.js 版本中可能不支持某些 npm 模块。因此在工作的时候请注意工作环境。</p>
</li>
</ul>
<h4 id="1-下载NVM"><a href="#1-下载NVM" class="headerlink" title="1.下载NVM"></a>1. 下载 NVM</h4><p> github 上下载最新版本:<a href="https://github.com/coreybutler/nvm-windows/releases%EF%BC%9B%E6%8E%A8%E8%8D%90%E4%B8%8B%E8%BD%BD%E7%AC%AC%E4%B8%89%E4%B8%AA%E5%8C%85%EF%BC%9Anvm-setup.zip">https://github.com/coreybutler/nvm-windows/releases；推荐下载第三个包：nvm-setup.zip</a></p>
<h4 id="2-安装之前的操作"><a href="#2-安装之前的操作" class="headerlink" title="2.安装之前的操作"></a>2. 安装之前的操作</h4><p><strong>注意</strong>： </p>
<ul>
<li>在安装 nvm for windows 之前，你需要卸载任何现有版本的 node.js。并且需要删除现有的 nodejs 安装目录（例如：”C:\Program Files\nodejs’）。因为，nvm 生成的 symlink（符号链接 / 超链接) 不会覆盖现有的（甚至是空的）安装目录。</li>
<li>你还需要删除现有的 npm 安装位置（例如 “C:\Users\weiqinl\AppData\Roaming\npm”  “C:\Users\weiqinl\AppData\Roaming\npm-cache”  ），以便正确使用 nvm 安装位置。</li>
</ul>
<h4 id="3-安装"><a href="#3-安装" class="headerlink" title="3.安装"></a>3. 安装</h4><p>双击执行下载的 setup 文件。注意 nodejs 目录的准确。</p>
<p>安装后会根据安装过程录入的安装目录 d:\xlnvm 和 d;D:\xlnodejs 自动如下生成坏境变量？</p>
<ul>
<li><p>NVM_HOME = d:\xlnvm</p>
</li>
<li><p>NVM_SYMLINK =D:\xlnodejs</p>
</li>
<li><p>Path 增加 % NVM_HOME%;% NVM_SYMLINK%</p>
</li>
</ul>
<h4 id="4-检测"><a href="#4-检测" class="headerlink" title="4.检测"></a>4. 检测</h4><p>检查是否安装成功，我们可以在新的命令窗口中输入</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">nvm</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>如果出现 nvm 版本号和一系列帮助指令，则说明 nvm 安装成功。</li>
<li>否则，可能会提示 <code>nvm: command not found</code></li>
</ul>
<h4 id="5-升级"><a href="#5-升级" class="headerlink" title="5.升级"></a>5. 升级</h4><p>如果要升级的话，请重新<a href="https://github.com/coreybutler/nvm-windows/releases">下载最新的安装程序</a>。并直接运行安装程序。它将安全的覆盖需要更新的文件，而无需关心 nodejs 的安装。<br>此次安装需要确保和上次使用相同的安装目录。<br>如果你最初安装到默认位置，则只需一直点击” 下一步”，直到完成。</p>
<h4 id="6-配置淘宝镜像"><a href="#6-配置淘宝镜像" class="headerlink" title="6.配置淘宝镜像"></a>6. 配置淘宝镜像</h4><p>由于 nvm 默认的下载地址 <a href="http://nodejs.org/dist/%E6%98%AF%E5%A4%96%E5%9B%BD%E5%A4%96%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E9%80%9F%E5%BA%A6%E9%9D%9E%E5%B8%B8%E6%85%A2%EF%BC%8C%E5%9B%A0%E8%80%8C%E5%8F%AF%E4%BB%A5%E5%88%87%E6%8D%A2%E5%88%B0%E6%B7%98%E5%AE%9D%E7%9A%84%E9%95%9C%E5%83%8F%EF%BC%8C%E4%B8%8B%E8%BD%BD%E9%80%9F%E5%BA%A6%E4%BC%9A%E5%BF%AB%E5%BE%88%E5%A4%9A%E3%80%82">http://nodejs.org/dist/ 是外国外服务器，速度非常慢，因而可以切换到淘宝的镜像，下载速度会快很多。</a></p>
<p><strong>配置方法：</strong></p>
<p>打开 nvm 的安装路径，默认安装路径是：C:\Users\ 用户名 \AppData\Roaming\nvm。</p>
<p>我安装在 <strong>D:\xlnvm，</strong>？C 盘可能权限会存在问题？</p>
<p><strong>打开 settings.txt，加入下面文件</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">root: D:\xlnvm</span><br><span class="line">path: D:\xlnodejs</span><br><span class="line">arch: 64 </span><br><span class="line">proxy: none</span><br><span class="line">//前面可能已经生成，后面为为国内镜像，方便后续安装。国内镜像有时会落后一个版本</span><br><span class="line">node_mirror: http://npm.taobao.org/mirrors/node/</span><br><span class="line">npm_mirror: https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></tbody></table></figure>
<h4 id="6-nvm安装node"><a href="#6-nvm安装node" class="headerlink" title="6.nvm安装node"></a>6.nvm 安装 node</h4><p>（1）<strong>nvm 安装命令：</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">nvm list available //current当前发布版15.8.0、LTS长期支持版14.15.5（2021.2.10）</span><br><span class="line">nvm install 15.4.0 //本地安装，一般这么安装即可。npm尽可能全局安装</span><br><span class="line">nvm install 15.4.0 -g //全局安装，nvm目录生成15.4.0目录。？？不知</span><br><span class="line">nvm use 15.4.0</span><br><span class="line">//本地安装时,会生成D:\xlnvm\15.4.0目录,并生成d:\xlnodejs的快捷方式（应该根据setting.txt设置），指向安装目录；</span><br><span class="line">//全局安装时,好像没区别</span><br><span class="line">//version就是要安装的nodejs版本，官网可以查询到。比如：</span><br><span class="line">    nvm install v11.6.0</span><br><span class="line">    nvm install 11.6.0</span><br></pre></td></tr></tbody></table></figure>
<p>（2）<strong>安装过程中关键点：</strong></p>
<p>   Downloading 代表正在下载 npm，一定要等下载完，不然会发现 npm 将无法使用。<br><img data-src="https://img-blog.csdnimg.cn/20190116130110558.png" alt="在这里插入图片描述"></p>
<p>   Installation complete 代表 nodejs 安装完成<br><img data-src="https://img-blog.csdnimg.cn/20190116130201729.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzIzOTU4NjI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong>ps：</strong><br> 如果第二步没有设置淘宝镜像，下载速度会很慢。就会像我之前一样，以为安装好了 nodejs，就着急的关闭了命令行。最后发现 npm 却无法适应，找了很久才发现是 npm 没下完。</p>
<h4 id="7-切换nodejs版本"><a href="#7-切换nodejs版本" class="headerlink" title="7.切换nodejs版本"></a>7. 切换 nodejs 版本</h4><p>（1）<strong>查询所有的 nodejs 版本</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">nvm list </span><br></pre></td></tr></tbody></table></figure>
<p>nvm list 查看当前安装的所有 nodejs 版本<br><img data-src="https://img-blog.csdnimg.cn/20190115133437761.png" alt="在这里插入图片描述"></p>
<p>（2）<strong>切换 nodojs 命令</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">nvm  use  version  </span><br></pre></td></tr></tbody></table></figure>
<p>比如：<br>nvm use 11.6.0 注意。安装后 use 之后才能正常。</p>
<p>这样就切换到了 11.6.0 版本的 nodejs 了</p>
<p>版本号前出现 * 代表为当前使用的 nodejs 版本</p>
<h4 id="8-配置环境变量（可能安装nvm时已自动配置好）"><a href="#8-配置环境变量（可能安装nvm时已自动配置好）" class="headerlink" title="8.配置环境变量（可能安装nvm时已自动配置好）"></a>8. 配置环境变量（可能安装 nvm 时已自动配置好）</h4><p>为了全局使用 nvm 命令，就需要配置下环境变量。这里以 win10 为例，win7 大同小异</p>
<p><strong>（1）环境变量地址：</strong><br>点击我的电脑》属性》高级设置》环境变量》环境变量</p>
<p><strong>（2）删除系统变量</strong><br>a. 找到系统变量<br>  删除系统自带的 nvm 变量：NVM_HOME 和 NVM_SYMLINK</p>
<p>b. 打开 path：删除 nvm 自动添加的变量 C:\nvm;C:\Program Files\nodejs</p>
<p><strong>（3） 配置用户变量</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">NVM_HOME = C:\Users\zhong\AppData\Roaming\nvm          </span><br><span class="line">NVM_SYMLINK = C:\Program Files\nodejs </span><br><span class="line">Path = %NVM_HOME%;%NVM_SYMLINK%</span><br></pre></td></tr></tbody></table></figure>
<h4 id="9-测试node，npm是否安装成功"><a href="#9-测试node，npm是否安装成功" class="headerlink" title="9.测试node，npm是否安装成功"></a>9. 测试 node，npm 是否安装成功</h4><p>依次执行 node，npm 命令</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">$ where node</span><br><span class="line">$ npm -v</span><br></pre></td></tr></tbody></table></figure>
<p>到这里，nvm，node，npm 就都安装成功了。安装失败往往是 npm 没有下载成功，或者环境变量没有设置成功，多尝试几次就好。</p>
<h4 id="10-linux下node版本管理-不适用windows，需另外安装nvm，但要在node之前安装"><a href="#10-linux下node版本管理-不适用windows，需另外安装nvm，但要在node之前安装" class="headerlink" title="10.linux下node版本管理(不适用windows，需另外安装nvm，但要在node之前安装)"></a>10.linux 下 node 版本管理 (不适用 windows，需另外安装 nvm，但要在 node 之前安装)</h4><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm install n -g</span><br><span class="line"></span><br><span class="line">n 12.24</span><br></pre></td></tr></tbody></table></figure>
<h3 id="（四）npm的全局安装？？？？（暂时没有）"><a href="#（四）npm的全局安装？？？？（暂时没有）" class="headerlink" title="（四）npm的全局安装？？？？（暂时没有）"></a>（四）npm 的全局安装？？？？（暂时没有）</h3><p>npm 即 nodejs package manager ，也就是 nodejs 的包管理工具。由于使用 nvm 管理 node，而每个 nodejs 的版本都自带 npm，所以在每次切换 node 版本的时候，npm 版本也会切换，这就可能导致一些已经安装的全局的其他包，因此造成原来下载过的包不可用</p>
<p>因此最好是单独安装一个全局的 npm 工具？，这个操作很有必要！</p>
<p><strong>全局模块存放路径为 d:\xlnvm\ 版本号中，及 D:\xlnodejs 快捷方式指向的目录。更换 node 版本号时，目录指向也改变</strong></p>
<h2 id="四、指定npm远程仓库镜像"><a href="#四、指定npm远程仓库镜像" class="headerlink" title="四、指定npm远程仓库镜像"></a>四、指定 npm 远程仓库镜像</h2><p>镜像使用方法（三种办法任意一种都能解决问题，建议使用第三种，将配置写死，下次用的时候配置还在）:</p>
<h5 id="1-通过config命令"><a href="#1-通过config命令" class="headerlink" title="1.通过config命令"></a>1. 通过 config 命令</h5><p>npm config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a><br>npm info underscore （如果上面配置正确这个命令会有字符串 response）</p>
<h5 id="2-命令行指定"><a href="#2-命令行指定" class="headerlink" title="2.命令行指定"></a>2. 命令行指定</h5><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm --registry https://registry.npm.taobao.org info underscore </span><br></pre></td></tr></tbody></table></figure>
<h5 id="3-编辑-npmrc-加入下面内容"><a href="#3-编辑-npmrc-加入下面内容" class="headerlink" title="3.编辑  ~/.npmrc 加入下面内容"></a>3. 编辑～/.npmrc 加入下面内容</h5><p>registry = <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p>
<ul>
<li>windows 下当前用户目录下 C:\Users\netxu 使用 npm config 生成.npmrc</li>
</ul>
<h5 id="4-查看镜像"><a href="#4-查看镜像" class="headerlink" title="4.查看镜像"></a>4. 查看镜像</h5><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm config get registry </span><br></pre></td></tr></tbody></table></figure>
<h5 id="npm-i-和-npm-install-的区别"><a href="#npm-i-和-npm-install-的区别" class="headerlink" title="npm i 和 npm install 的区别"></a>npm i 和 npm install 的区别</h5><ol>
<li>用 npm i 安装的模块无法用 npm uninstall 删除，用 npm uninstall i 才卸载掉 </li>
<li>npm i 会帮助检测与当前 node 版本最匹配的 npm 包版本号，并匹配出来相互依赖的 npm 包应该提升的版本号 </li>
<li>部分 npm 包在当前 node 版本下无法使用，必须使用建议版本 </li>
<li>安装报错时 intall 肯定会出现 npm-debug.log 文件，npm i 不一定</li>
</ol>
<h2 id="五、NPM删除卸载-npm-包"><a href="#五、NPM删除卸载-npm-包" class="headerlink" title="五、NPM删除卸载 npm 包"></a>五、NPM 删除卸载 npm 包</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>我们现在假设要卸载一个 npm 包：<code>xx-abc</code>。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm uninstall xx-abc</span><br></pre></td></tr></tbody></table></figure>
<p>这会在 <code>node_modules</code> 中删除 xx-abc 的文件夹。</p>
<p>【】删除本地模块时是否将在 <code>package.json</code> 上的相应依赖信息也删除？</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm uninstall xx-abc：删除模块，但不删除模块留在package.json中的对应信息</span><br><span class="line">// 如果是安装在 dependencies</span><br><span class="line">npm uninstall xx-abc --save 删除模块，同时删除模块留在package.json中dependencies下的对应信息</span><br><span class="line">// 如果是安装在 devDependencies</span><br><span class="line">npm uninstall xx-abc --save-dev 删除模块，同时删除模块留在package.json中devDependencies下的对应信息</span><br></pre></td></tr></tbody></table></figure>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>有时候 <code>npm uninstall xx-abc</code> 会出现错误；原因比较多，无法删除的原因有可能是这个模块又依赖了别的 <code>xxxxx</code>，所以卸载不了；那就把 <code>node_modules</code> 文件夹删除了重新安装。</p>
<p>删除 <code>node_modules</code> 优雅的方式是：</p>
<p>1、命令行中使用 <code>rm</code> 命令是一个不错的选择</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">rm -rf node_modules</span><br></pre></td></tr></tbody></table></figure>
<p>2、或者使用 <code>rimraf</code> 来删除目录</p>
<p>rimraf 封装了删除文件或文件夹命令的 npm 包</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm install rimraf -g</span><br><span class="line">rimraf node_modules</span><br></pre></td></tr></tbody></table></figure>
<p>然后再进行 <code>npm uninstall</code> 卸载操作，确保【npm 删除卸载一个模块】</p>
<p>全局安装 rimraf 包时，会在 d:\xlnvm\ 当前 node 版本目录中生成相关文件。</p>
<h2 id="npm-清理缓存"><a href="#npm-清理缓存" class="headerlink" title="npm 清理缓存"></a>npm 清理缓存</h2><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm cache clean -f</span><br></pre></td></tr></tbody></table></figure>


<h2 id="六、安装hexo："><a href="#六、安装hexo：" class="headerlink" title="六、安装hexo："></a>六、安装 hexo：</h2><p> Hexo 是一个静态博客框架，基于 Node.js，将 Markdown 文章通过渲染引擎，生成一个静态网页，再结合 Git 命令（ssh），Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<p>Hexo 是一个博客框架。它把本地文件里的信息生成一个网页。如果不需要放在网上给别人看，就没 Github Pages 什么事了。</p>
<ul>
<li>更换 node 版本时，对应版本下 npm 安装的内容都要重新安装，因为 npm 安装的包都在 node 版本目录下。</li>
</ul>
<h3 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo 安装</h3><p>gitBush 或 cmd 都可以运行如下安装命令：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></tbody></table></figure>
<p>windwos 下安装出现错误正常：出错的文件是 mac 需要的，windwos 下不需要</p>
<p>C:\Users\netxu\AppData\Roaming\npm\hexo -&gt; C:\Users\netxu\AppData\Roaming\npm\node_modules\hexo-cli\bin\hexo<br>npm WARN optional SKIPPING OPTIONAL DEPENDENCY: <a href="mailto:fsevents@2.1.3">fsevents@2.1.3</a> (node_modules\hexo-cli\node_modules\fsevents):<br>npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for <a href="mailto:fsevents@2.1.3">fsevents@2.1.3</a>: wanted {“os”:”darwin”,”arch”:”any”} (current: {“os”:”win32”,”arch”:”x64”})</p>
<h3 id="hexo卸载（同时删除当前目录下生成的文件）"><a href="#hexo卸载（同时删除当前目录下生成的文件）" class="headerlink" title="hexo卸载（同时删除当前目录下生成的文件）"></a>hexo 卸载（同时删除当前目录下生成的文件）</h3><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm uninstall hexo-cli -g</span><br></pre></td></tr></tbody></table></figure>
<h3 id="hexo升级-此时若不成功，可在初始化后升级或换主题时升级"><a href="#hexo升级-此时若不成功，可在初始化后升级或换主题时升级" class="headerlink" title="hexo升级:此时若不成功，可在初始化后升级或换主题时升级"></a>hexo 升级：此时若不成功，可在初始化后升级或换主题时升级</h3><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm update -g #目前有错？？？？？？？？？？暂不使用</span><br></pre></td></tr></tbody></table></figure>


<h3 id="Hexo和Node-js版本对应"><a href="#Hexo和Node-js版本对应" class="headerlink" title="Hexo和Node.js版本对应"></a>Hexo 和 Node.js 版本对应</h3><table>
<thead>
<tr>
<th align="left">Hexo version</th>
<th align="left">Minimum Node.js version</th>
</tr>
</thead>
<tbody><tr>
<td align="left">5.0+</td>
<td align="left">10.13.0</td>
</tr>
<tr>
<td align="left">4.1 - 4.2</td>
<td align="left">8.10</td>
</tr>
<tr>
<td align="left">4.0</td>
<td align="left">8.6</td>
</tr>
<tr>
<td align="left">3.3 - 3.9</td>
<td align="left">6.9</td>
</tr>
<tr>
<td align="left">3.2 - 3.3</td>
<td align="left">0.12</td>
</tr>
<tr>
<td align="left">3.0 - 3.1</td>
<td align="left">0.10 or iojs</td>
</tr>
<tr>
<td align="left">0.0.1 - 2.8</td>
<td align="left">0.10</td>
</tr>
</tbody></table>
<ul>
<li><p>nvm list availabel 结果中 LTS 栏下的版本可用的为 12 版本的，之上版本在初始化、生成和服务时都可能出现 warning 之类的错误信息。</p>
</li>
<li><p>实践中 node version 15.8.0 15.4.0 配置 Hexo 5.3，hexo cli 4.2 在生成或作为服务时，出现 warning 一类的信息，如下配置后，可以正常运行：<br>NexT version 8.2.1<br>hexo: 5.3.0<br>hexo-cli: 4.2.0<br>node: 12.14.0 （12 版本的都没问题，最后用的 12.20.1）</p>
</li>
</ul>
<h2 id="七、创建本地博客"><a href="#七、创建本地博客" class="headerlink" title="七、创建本地博客"></a>七、创建本地博客</h2><ul>
<li><p>在 D 盘下创建文件夹 /d/MyGitHub/hexo-test/</p>
</li>
<li><p>进入该文件夹，鼠标右键 ，选择 Git Bash Here。 如果没有安装 Git，就不会有这个选项。</p>
</li>
<li><p>Git Bash 打开之后，所在的位置就是该文件夹位置</p>
</li>
<li><p>输入 hexo init 将文件夹初始化成一个博客文件夹。</p>
</li>
<li><p>有时需要输入 npm install 安装依赖包。</p>
</li>
<li><p>有时需要输入 npm install stylus #执行后续 hexo g 时需要的包，否则会出现’Accessing non-existent property’ errors </p>
</li>
<li><p>输入 hexo g 生成（generate）网页。 由于我们还没创建任何博客，生成的网页会展示 Hexo 里面自带了一个 Hello World 的博客。</p>
</li>
<li><p>输入 hexo s 将生成的网页放在了本地服务器（server）。</p>
</li>
<li><p>浏览器里输入 <a href="http://localhost:4000/">http://localhost:4000/</a> 。 就可以看到刚才的成果了。</p>
</li>
<li><p>回到 Git Bash，按 Ctrl+C 结束。</p>
</li>
<li><p>此时再看 <a href="http://localhost:4000/">http://localhost:4000/</a> 就是无法访问了。</p>
</li>
</ul>
<h2 id="八、发布一篇博客"><a href="#八、发布一篇博客" class="headerlink" title="八、发布一篇博客"></a>八、发布一篇博客</h2><ul>
<li>继续在 Git Bash 里，所在路径还是 /d/MyGitHub/hexo-test/。输入 `hexo new “My First Post”</li>
<li> 博客头可修改 \scaffolds\post.md</li>
<li> 在 D:\MyGitHub\hexo-test\source_posts 路径下，会有一个 My-First-Post.md 的文件。 编辑这个文件，然后保存。</li>
<li>回到 Git Bash，输入 <code>hexo g</code></li>
<li>输入 <code>hexo s</code></li>
<li>前往 <a href="https://link.zhihu.com/?target=http://localhost:4000/">http://localhost:4000/</a> 查看成果。</li>
<li>回到 Git Bash，按 Ctrl+C 结束。</li>
</ul>
<h2 id="九、将本地-Hexo-博客部署在-Github-上"><a href="#九、将本地-Hexo-博客部署在-Github-上" class="headerlink" title="九、将本地 Hexo 博客部署在 Github 上"></a><strong>九、将本地 Hexo 博客部署在 Github 上</strong></h2><p>前述已经有了本地博客，和一个能托管这些资料的线上仓库。只要把本地博客部署（deploy）在我们的 Github 对应的 Repository 就可以了。</p>
<h3 id="1-获取-Github-对应的-Repository-的链接。"><a href="#1-获取-Github-对应的-Repository-的链接。" class="headerlink" title="1. 获取 Github 对应的 Repository 的链接。"></a><strong>1. 获取 Github 对应的 Repository 的链接。</strong></h3><ul>
<li>登陆 Github，进入到 <a href="https://github.com/netxulei/netxulei.github.io">https://github.com/netxulei/netxulei.github.io</a></li>
<li> 点击 Clone or download</li>
<li><img data-src="D:\MygitHub\LearnDoc\Snipaste_2021-02-04_16-38-48.jpg" alt="Snipaste_2021-02-04_16-38-48" style="zoom:50%;"></li>
<li> 复制 URL 待用</li>
</ul>
<p>我的是</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">https://github.com/netxulei/netxulei.github.io.git</span><br></pre></td></tr></tbody></table></figure>


<h3 id="2-修改博客配置文件"><a href="#2-修改博客配置文件" class="headerlink" title="2. 修改博客配置文件"></a><strong>2. 修改博客配置文件</strong></h3><ul>
<li><p>打开配置文件 D:\MygitHub\hexo-test\_config.yml （使用 bash 里的 vi 或者 notepad++）</p>
</li>
<li><p>找到 <code>#Deployment</code>，填入以下内容：<strong>注意关键字冒号后要有空格；branch 值应为 main，不是 master</strong></p>
</li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">deploy: </span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/netxulei/netxulei.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></tbody></table></figure>
<p>保存退出</p>
<h3 id="3-部署"><a href="#3-部署" class="headerlink" title="3. 部署"></a><strong>3. 部署</strong></h3><ul>
<li><ul>
<li><p>回到 Git Bash</p>
</li>
<li><p>输入 </p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></tbody></table></figure>
<p>应全局安装？（I do，全局安装，hexo d 后，出现 ERROR Deployer not found: git。看来应该本地安装）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save -g</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>输入 <code>hexo d</code>, 注意 deploy 时可能要你输入 username 和 password。</p>
</li>
<li><p>得到 <code>INFO Deploy done: git</code> 即为部署成功</p>
</li>
</ul>
</li>
</ul>
<p>之前我们创建的 ReadMe.md 会被自动覆盖掉。</p>
<h3 id="4-查看成果"><a href="#4-查看成果" class="headerlink" title="4. 查看成果"></a><strong>4. 查看成果</strong></h3><p>前往 <a href="https://netxulei.github.io/">https://netxulei.github.io</a> 即可。</p>
<h3 id="5-更新博客"><a href="#5-更新博客" class="headerlink" title="5. 更新博客"></a><strong>5. 更新博客</strong></h3><ul>
<li><p>继续在 Git Bash 里，所在路径还是 /d/MyGitHub/hexo-test/。输入</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">hexo new My-Second-Post</span><br></pre></td></tr></tbody></table></figure>
<p>在 D:\MyGitHub\hexo-test\source_posts 路径下，会有一个 My-Second-Post.md 的文件。 编辑这个文件，然后保存。</p>
</li>
<li><p>回到 Git Bash，输入（修改完应该先生成，再发布）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">hexo clean  //清除了你之前生成的东西，也可以不加。</span><br><span class="line">hexo g  //生成</span><br><span class="line">hexo s  //本地测试，localhost:4000</span><br><span class="line">hexo d  //发布</span><br></pre></td></tr></tbody></table></figure>
<h2 id="十、修改主题官方主题NexT为例"><a href="#十、修改主题官方主题NexT为例" class="headerlink" title="十、修改主题官方主题NexT为例"></a>十、修改主题<a href="https://hexo.io/themes/">官方主题 NexT 为例</a></h2></li>
</ul>
<h3 id="（一）NexT主题基本使用"><a href="#（一）NexT主题基本使用" class="headerlink" title="（一）NexT主题基本使用"></a>（一）NexT 主题基本使用</h3><h4 id="1-NexT仓库"><a href="#1-NexT仓库" class="headerlink" title="1.NexT仓库"></a>1.NexT 仓库</h4><p> 一共有三个不同的仓库：</p>
<table>
<thead>
<tr>
<th>版本</th>
<th>年份</th>
<th>仓库</th>
</tr>
</thead>
<tbody><tr>
<td> v5.1.4 或更低</td>
<td> 2014 ~ 2017</td>
<td><a href="https://github.com/iissnan/hexo-theme-next">https://github.com/iissnan/hexo-theme-next</a></td>
</tr>
<tr>
<td>v6.0.0 ~ v7.8.0</td>
<td>2018 ~ 2019</td>
<td><a href="https://github.com/theme-next/hexo-theme-next">https://github.com/theme-next/hexo-theme-next</a></td>
</tr>
<tr>
<td>v8.0.0 或更高</td>
<td> 2020</td>
<td><a href="https://github.com/next-theme/hexo-theme-next">https://github.com/next-theme/hexo-theme-next</a></td>
</tr>
</tbody></table>
<p>遗憾的是，每个新仓库的创建者都没有 Archive 旧仓库的权限。因此许多网络上的教程并不能区分这三个仓库的区别，特别是后两个名称相近的。为了避免安装错误的 NexT，请务必严格按照本仓库 README 中提供的安装方式进行操作。<br>跨版本的升级可能并不顺滑（例如由 v5.1.4 或 v7.8.0 升级至 v8.0.0），请备份配置文件及修改过的文件（例如自定义模板文件）后，重新安装新的主题。具体操作请阅读文档： <a href="https://theme-next.js.org/docs/getting-started/upgrade.html">https://theme-next.js.org/docs/getting-started/upgrade.html</a><br><strong>NexT 团队将拒绝解答使用旧版本 NexT 出现的问题。</strong></p>
<h4 id="2-克隆NexT"><a href="#2-克隆NexT" class="headerlink" title="2.克隆NexT"></a>2. 克隆 NexT</h4><p>回到 Git Bash，输入如下命令，该主题的文件就全部克隆到  D:\MyGitHub\hexo-test\themes\next 下面。</p>
<p>可在官方主题找到每个主题的克隆地址。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$ cd /d/MyGitHub/hexo-test/</span><br><span class="line">$ git clone https://github.com/next-theme/hexo-theme-next.git themes/next</span><br><span class="line">$ git clone https://github.com/next-theme/hexo-theme-next themes/next(上条命令带有.git和本条有什么不同？)</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>目前已知 Github 国内镜像网站有 <a href="https://github.com.cnpmjs.org/">github.com.cnpmjs.org</a>（亲测这个访问速度较快）和 <a href="https://git.sdut.me/">git.sdut.me/</a>。你可以根据你对这两个网站访问速度快慢，选择其中一个即可。接下来只需要在 clone 某个项目的时候将 github.com 替换为 github.com.cnpmjs.org 即可。（目前不知镜像是否齐全）</li>
</ul>
<h4 id="3-修改博客配置文件"><a href="#3-修改博客配置文件" class="headerlink" title="3.修改博客配置文件"></a>3. 修改博客配置文件</h4><p>打开 D:\MyGitHub\hexo-test\_config.yml</p>
<p> <code>theme:</code></p>
<ul>
<li><p>把 Hexo 默认的 lanscape 修改成 next。 即 `theme: next</p>
</li>
<li><p>找到 <code># Site</code>，添加博客名称，作者名字等。</p>
<ul>
<li><p><code>language</code> 后面填入 en 或者 zh-CN，选择英文或者中文。<strong>注意如果修改后不起作用，请来到 theme/next/languages/ 目录下查看是否有 zh-CN.yml（zh-EN.yml) 的文件，如果没有，请直接到 next 的 Github 下载相应文件添加即可。</strong></p>
</li>
<li><p>找到 <code># URL</code>, 填入 url。比如 <code>url: https://netxulei.github.io</code></p>
</li>
<li><p>填入名字后会有很风骚的 © 2017 Ryan Luo Xu 的字样出现在博客底部。</p>
</li>
</ul>
</li>
</ul>
<h4 id="4-重新生成部署"><a href="#4-重新生成部署" class="headerlink" title="4.重新生成部署"></a>4. 重新生成部署</h4><ul>
<li>回到 Git Bash。输入 </li>
<li><code>hexo clean</code></li>
<li>hexo g -d 先把修改的内容生成网页，再部署。</li>
</ul>
<h4 id="5-查看成果"><a href="#5-查看成果" class="headerlink" title="5.查看成果"></a>5. 查看成果</h4><p>前往 netxulei.github.io 即可。</p>
<h3 id="（二）【必读】NexT更新说明及常见问题（官网）"><a href="#（二）【必读】NexT更新说明及常见问题（官网）" class="headerlink" title="（二）【必读】NexT更新说明及常见问题（官网）"></a>（二）【必读】<a href="https://github.com/next-theme/hexo-theme-next/issues/4">NexT 更新说明及常见问题</a>（官网）</h3><h4 id="常见问题说明"><a href="#常见问题说明" class="headerlink" title="常见问题说明"></a>常见问题说明</h4><ul>
<li><p>NexT 配置升级后，网上很多内容已过时，根据官网内容即可。</p>
</li>
<li><p><code>_config.yml</code> 篇幅有限，一些配置选项的细节并没有展现。为了避免出现问题，请在进行配置和使用前阅读网站 <a href="https://theme-next.js.org/">https://theme-next.js.org</a> 上对应的文档。</p>
</li>
</ul>
<h4 id="问题反馈方式"><a href="#问题反馈方式" class="headerlink" title="问题反馈方式"></a>问题反馈方式</h4><p>多种方法可以与 NexT 主题开发 / 维护者团队（下称「NexT 团队」）或其他用户取得联系，共同解决问题：</p>
<ol>
<li>加入 Telegram 群，讨论问题更方便<ul>
<li>中文群：<a href="https://t.me/theme_next_cn">https://t.me/theme_next_cn</a></li>
</ul>
</li>
<li> 使用 GitHub Discussions 功能发帖：<a href="https://github.com/next-theme/hexo-theme-next/discussions">https://github.com/next-theme/hexo-theme-next/discussions</a></li>
<li> 提交 Issue。我们建议将 Issue 主要用于 Bug Report 和 Feature Request，以明确阶段性的开发目标；如果只是单纯的遇到使用上的问题，可以使用上述两种反馈方式。具体见后文的「Issue 和 Pull Request 规范」部分。</li>
</ol>
<h4 id="NexT-自定义"><a href="#NexT-自定义" class="headerlink" title="NexT 自定义"></a>NexT 自定义</h4><p>NexT 支持在不修改主题仓库内文件的情况下进行配置和自定义，因此无论是使用 Git 还是 npm 都能顺利更新。如果你见到要求直接修改主题文件的「教程」文章，请谨慎甄别，因为其内容可能过时。</p>
<p><strong><code>_config.next.yml</code> 配置文件</strong></p>
<p>为了避免更新出现冲突，推荐使用 Alternate Theme Config 存储配置：<a href="https://theme-next.js.org/docs/getting-started/configuration.html">https://theme-next.js.org/docs/getting-started/configuration.html</a><br>注：Hexo 官方已实现此功能，在升级到 Hexo 5.0 版本后，请留意配置方式上的改变，使用 <code>_config.next.yml</code> 代替 <code>source/_data/next.yml</code>。<strong>旧的 <code>next.yml</code> 配置方式诞生于 2015 年（<a href="https://github.com/iissnan/hexo-theme-next/issues/328">iissnan/hexo-theme-next#328</a>），已经完成其历史使命，将在 NexT v8.1.0 版本后停止支持。</strong></p>
<h3 id="（三）next主题配置"><a href="#（三）next主题配置" class="headerlink" title="（三）next主题配置"></a>（三）next 主题配置</h3><p>使用 NexT 版本支持的 Alternate Theme Config 替代的主题配置文件 /__config.[name].yml。将 [name] 替换为网站配置文件 /_config.yml 中的 <strong>theme</strong> 选项的值，例如:next。</p>
<p>复制需要的 NexT 主题选项 /next/<em>config.yml 到这个主题配置文件</em> /_config.next.yml，若是第一次安装，复制整个文件。并在最前加入 theme_config 选项，next 的选项都保持缩进。</p>
<p>1. 请确认 /source/_data/next.yml 文件不存在 (如果存在请备份并删除)。</p>
<p>2. 复制整个配置文件或将需要的 NexT 主题选项从主题配置文件复制到站点配置文件</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">cp themes/next/_config.yml _config.next.yml</span><br></pre></td></tr></tbody></table></figure>
<p><del>3. 添加 theme_config 参数</del></p>
<p><del>3.1 将所有这些设置向右移动两个空格 (在 Visual Studio Code 中：选择所有字符串，CTRL +])。</del></p>
<p><del>3.2 在所有这些设置之上添加 <code>theme_config:</code> 参数。</del></p>
<ul>
<li><del>通过这种方式，您的所有配置都位于主站点配置文件_config.next.yml 中。您不需要编辑主题配置文件或创建任何新文件。但是您需要在 <strong>theme_config</strong> 选项内保持缩进。</del></li>
<li><del>过去 /source/_data/next.yml 的配置方式已经弃用（Deprecated）</del></li>
</ul>
<p><strong>注意：经过试验，直接在__config.next.yml 中添加需要改变的主题参数即可，无需添加 <code>theme_config:</code> 参数，也无需缩进。_</strong></p>
<p><strong>__config.next.yml 中参数的优先级高于 themes/next/_config.yml 中参数的优先级</strong></p>
<h3 id="（四）next主题优化"><a href="#（四）next主题优化" class="headerlink" title="（四）next主题优化"></a>（四）next 主题优化</h3><ul>
<li><strong>修改 /_config.yml</strong></li>
<li><strong> 修改 themes\next\_config.yml 或__config.next.yml（优先级更高)</strong></li>
</ul>
<h4 id="中文设置"><a href="#中文设置" class="headerlink" title="中文设置"></a>中文设置</h4><p>check hexo 根目录下的_config.yml 文件。</p>
<p>language 行设置为 zh-CN（中文）zh-EN (英文 注意 冒号后面要多一个空格</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"># Sit</span><br><span class="line">language: zh-CN</span><br></pre></td></tr></tbody></table></figure>
<p>若修改后不起作用，请来到 <strong>theme/next/languages/ 目录下查看是否有 zh-CN.yml</strong>（zh-EN.yml) 的文件，如果没有，请直接到 next 的 Github 下载相应文件添加即可。</p>
<h4 id="next风格选择"><a href="#next风格选择" class="headerlink" title="next风格选择"></a>next 风格选择</h4><p>next 有四种风格，在站点配置文件搜索字段 Scheme Settings 可以看到，<br>根目录 themes\next themes\next</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"># Scheme Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></tbody></table></figure>
<p>我这里用的是四种：Gemini</p>
<h4 id="Menu-Settings菜单设置"><a href="#Menu-Settings菜单设置" class="headerlink" title="# Menu Settings菜单设置"></a># Menu Settings 菜单设置</h4><p>比如可以看到我的主页有首页、留言、分类、归档、标签等菜单，<br>在站点配置文件下搜索 menu:, 可以看到</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about/ || user</span><br><span class="line">  message: /message/ || comment</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>home 就是首页；message 就是留言… <strong>一开始只有首页和归档，其余的需要手动创建</strong></li>
<li>在站点根目录下打开命令行，输入 hexo new page about，会生成 D:\MygitHub\hexo-test\source\about\index.md,<br>并在主题配置文件 menu: 字段处取消对 about 的注释，重新部署我们就可以看到主页有关于这个菜单了，其他的类似</li>
<li>修改 D:\MygitHub\hexo-test\source\about\<a href="http://index.md/">index.md</a>, 就可以修改关于界面了</li>
<li> about: /about/ || user 中的 user 是指关于菜单附件的图标用的是图标库里面名为 user 的图标</li>
</ul>
<h4 id="Local-Search-本地搜索"><a href="#Local-Search-本地搜索" class="headerlink" title="# Local Search 本地搜索"></a># Local Search 本地搜索</h4><p>Local search does not require any external 3rd-party services and can be extra indexed by search engines. This search method is recommended for most users.（依赖于 <a href="https://github.com/next-theme/hexo-generator-searchdb%EF%BC%89">https://github.com/next-theme/hexo-generator-searchdb）</a></p>
<p>发布到 github 应带有–save 参数，否则 github 博客会不正常，搜索界面不停跑</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></tbody></table></figure>
<p>_config.yml（点击搜索菜单才能反映，如下配置也可以放置在_config.next.yml. <strong>经测试，此处不配置也可以</strong>）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: true</span><br><span class="line">  format: html</span><br></pre></td></tr></tbody></table></figure>
<p>__config.next.yml（显示搜索菜单，放大镜图标）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">   enable: true</span><br></pre></td></tr></tbody></table></figure>
<h4 id="back2top-回到顶部按钮"><a href="#back2top-回到顶部按钮" class="headerlink" title="# back2top:回到顶部按钮"></a># back2top: 回到顶部按钮</h4><p> 一个主参数 enable，两个子参数 sidebar 和 scrollpercent</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">back2top:</span><br><span class="line">  enable: true</span><br><span class="line">  # Back to top in sidebar.</span><br><span class="line">  sidebar: true</span><br><span class="line"> # Scroll percent label in b2t button.</span><br><span class="line">  scrollpercent: true</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Reading-progress-bar-：网页阅读进度"><a href="#Reading-progress-bar-：网页阅读进度" class="headerlink" title="# Reading progress bar  ：网页阅读进度"></a># Reading progress bar  ：网页阅读进度</h4><h4 id="Bookmark-Support-：书签支持，回到原来阅读的位置"><a href="#Bookmark-Support-：书签支持，回到原来阅读的位置" class="headerlink" title="# Bookmark Support  ：书签支持，回到原来阅读的位置"></a># Bookmark Support  ：书签支持，回到原来阅读的位置</h4><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">bookmark:</span><br><span class="line">  enable: true</span><br><span class="line">  # Customize the color of the bookmark.</span><br><span class="line">  color: "#222"</span><br><span class="line">  # If auto, save the reading progress when closing the page or clicking the bookmark-icon.</span><br><span class="line">  # If manual, only save it by clicking the bookmark-icon.</span><br><span class="line">  save: auto</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Follow-me-on-GitHub-banner-in-the-top-right-corner-右上角显示广告条（猫）"><a href="#Follow-me-on-GitHub-banner-in-the-top-right-corner-右上角显示广告条（猫）" class="headerlink" title="# Follow me on GitHub banner in the top-right corner.右上角显示广告条（猫）"></a># <code>Follow me on GitHub</code> banner in the top-right corner. 右上角显示广告条（猫）</h4><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">github_banner:</span><br><span class="line">  enable: true</span><br><span class="line">  permalink: https://github.com/netxulei</span><br><span class="line">  title: 转到我的GitHub</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Post-wordcount-display-settings字数统计设置"><a href="#Post-wordcount-display-settings字数统计设置" class="headerlink" title="# Post wordcount display settings字数统计设置"></a># Post wordcount display settings 字数统计设置</h4><p>每个博文标题下面显示本文字数和阅读时长</p>
<p>Symbols count and time to read for articles in Hexo blog.</p>
<p>Better than <a href="https://github.com/ierhyna/hexo-reading-time"><code>hexo-reading-time</code></a> and faster than <a href="https://github.com/willin/hexo-wordcount"><code>hexo-wordcount</code></a>. No external dependencies.</p>
<p># Dependencies: <a href="https://github.com/next-theme/hexo-word-counter">https://github.com/next-theme/hexo-word-counter</a> </p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$ npm install hexo-word-counter --save</span><br><span class="line">$ hexo clean</span><br></pre></td></tr></tbody></table></figure>
<p> <strong>Hexo’s <code>_config.yml</code></strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true</span><br><span class="line">  time: true</span><br><span class="line">  total_symbols: true</span><br><span class="line">  total_time: true</span><br><span class="line">  exclude_codeblock: false</span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br><span class="line">  suffix: "mins."</span><br></pre></td></tr></tbody></table></figure>
<p>If <code>symbols_count_time</code> option is not specified, the default parameters will be used.</p>
<p>上述参数可不指定，但最后三个参数为默认值。</p>
<p>Parameters<br>awl – Average Word Length (chars count in word). Default: 4. You can check this here.<br>CN ≈ 2<br>EN ≈ 5<br>RU ≈ 6<br>wpm – Words Per Minute. Default: 275. You can check this here.<br>Slow ≈ 200<br>Normal ≈ 275<br>Fast ≈ 350<br>suffix – If time to read less then 60 minutes, added suffix as string parameter.<br>If not defined, mins. will be used as default.<br>exclude_codeblock – Allow to exclude all content inside code blocks for more accurate words counting.<br>If not defined, false will be used as default.</p>
<p><strong>Note for Chinese users:</strong> because in Chinese language average word length about <code>~1.5</code> and if you at most cases write posts in Chinese (without mixed English), recommended to set <code>awl</code> to <code>2</code> and <code>wpm</code> to <code>300</code>.<br>But if you usualy mix your posts with English, <code>awl</code> to <code>4</code> and <code>wpm</code> to <code>275</code> will be nice.</p>
<p><strong>NexT theme</strong></p>
<p>This plugin integrated in «NexT» and after plugin enabled in main Hexo config, you may adjust options in NexT config:</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true</span><br><span class="line">  item_text_post: true</span><br><span class="line">  item_text_total: false</span><br></pre></td></tr></tbody></table></figure>


<h4 id="Custom-Logo-Support-自定义logo"><a href="#Custom-Logo-Support-自定义logo" class="headerlink" title="# Custom Logo Support 自定义logo"></a># Custom Logo Support 自定义 logo</h4><p>NexT supports the site logo personalization.</p>
<p>You can enable it by adding images’s url to <code>custom_logo</code> in theme config file.</p>
<p>next/_config.yml：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">custom_logo: /uploads/custom-logo.jpg</span><br></pre></td></tr></tbody></table></figure>
<p>Scheme Mist does not support custom logo setting.</p>
<h4 id="Hexo-NexT-Three"><a href="#Hexo-NexT-Three" class="headerlink" title="# Hexo NexT Three"></a># Hexo NexT Three</h4><p><a href="https://camo.githubusercontent.com/00827ef9023c879f67e199cdd41c85980d7aea235fab5056b5bff81079164ed6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4e6578542d76372e332e302b2d626c75653f7374796c653d666c61742d737175617265"><img data-src="https://camo.githubusercontent.com/00827ef9023c879f67e199cdd41c85980d7aea235fab5056b5bff81079164ed6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4e6578542d76372e332e302b2d626c75653f7374796c653d666c61742d737175617265" alt="Theme Version"></a> <a href="https://camo.githubusercontent.com/08235c69dd14945b92d6a4eb20e3673a50f7619ac2ce43a7569a7cbfb052df1d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7061636b6167652d6a736f6e2f762f6e6578742d7468656d652f6865786f2d6e6578742d74687265653f7374796c653d666c61742d737175617265"><img data-src="https://camo.githubusercontent.com/08235c69dd14945b92d6a4eb20e3673a50f7619ac2ce43a7569a7cbfb052df1d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7061636b6167652d6a736f6e2f762f6e6578742d7468656d652f6865786f2d6e6578742d74687265653f7374796c653d666c61742d737175617265" alt="Package Version"></a></p>
<p><a href="https://github.com/mrdoob/three.js">JavaScript 3D library</a> for NexT.</p>
<h5 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h5><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm install next-theme/hexo-next-three</span><br></pre></td></tr></tbody></table></figure>
<h5 id="Configure"><a href="#Configure" class="headerlink" title="Configure"></a>Configure</h5><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"># JavaScript 3D library.</span><br><span class="line"># Dependencies: https://github.com/next-theme/hexo-next-three</span><br><span class="line">three:</span><br><span class="line">  enable: true</span><br><span class="line">  defer: true</span><br><span class="line">  cdn:</span><br><span class="line">  waves:</span><br><span class="line">    enable: false</span><br><span class="line">    cdn:</span><br><span class="line">  lines:</span><br><span class="line">    enable: false</span><br><span class="line">    cdn:</span><br><span class="line">  sphere:</span><br><span class="line">    enable: false</span><br><span class="line">    cdn:</span><br></pre></td></tr></tbody></table></figure>
<h4 id="阅读全文设置"><a href="#阅读全文设置" class="headerlink" title="阅读全文设置"></a>阅读全文设置</h4><p># Automatic excerpt generator for Hexo!. 阅读全文设置</p>
<p># Hexo-excerpt: <a href="https://chekun.me/post/hexo-excerpt">https://chekun.me/post/hexo-excerpt</a></p>
<p># npm install hexo-excerpt –save</p>
<p># You can specify the size of the excerpt by setting depth in your config, which defaults to 10.</p>
<p># You can also exclude certain tags from the generated excerpt using css selectors. Tags matching any of the selectors will be excluded.</p>
<p># The default behaviour is to only show an excerpt if it would not be the whole post. Set hideWholePostExcerpts to false to override that and show whole post excerpts.</p>
<p>excerpt:</p>
<p> depth: 10</p>
<p> excerpt_excludes: []</p>
<p> more_excludes: []</p>
<p> hideWholePostExcerpts: true</p>
<h2 id="（三）Hexo-添加分类及标签"><a href="#（三）Hexo-添加分类及标签" class="headerlink" title="（三）Hexo 添加分类及标签"></a>（三）Hexo 添加分类及标签</h2><h4 id="1-创建“分类”选项"><a href="#1-创建“分类”选项" class="headerlink" title="1. 创建“分类”选项"></a>1. 创建 “分类” 选项</h4><p>生成 “分类” 页并添加 tpye 属性，进入博客目录。执行命令下方命令</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo new page categories</span><br></pre></td></tr></tbody></table></figure>
<p>categories 文件夹下会有 index.md 这个文件，打开后默认内容是这样的：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2019-04-22 14:47:40</span><br><span class="line">---</span><br></pre></td></tr></tbody></table></figure>
<p>添加 type: “categories” 到内容中，添加后是这样的：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2019-04-24 15:30:30</span><br><span class="line">type: categories</span><br><span class="line">---</span><br></pre></td></tr></tbody></table></figure>
<p>保存并关闭文件。</p>
<p>给文章添加 “categories” 属性</p>
<p>打开需要添加分类的文章，为其添加 categories 属性。下方的 categories:Hexo 表示这篇文章添加到到 “Hexo” 这个分类。注意：一篇文章只会添加到一个分类中，如果是多个默认放到第一个分类中。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo 添加分类及标签</span><br><span class="line">date: 2017-05-26 12:12:57</span><br><span class="line">categories: Hexo</span><br><span class="line">---</span><br></pre></td></tr></tbody></table></figure>
<p>至此，成功给文章添加分类，点击首页的 “分类” 可以看到该分类下的所有文章。当然，只有添加了 categories: xxx 的文章才会被收录到首页的 “分类” 中。</p>
<h4 id="2-创建“标签”选项"><a href="#2-创建“标签”选项" class="headerlink" title="2. 创建“标签”选项"></a>2. 创建 “标签” 选项</h4><p>生成 “标签” 页并添加 tpye 属性</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo new page tags</span><br></pre></td></tr></tbody></table></figure>
<p>在 tags 文件夹下，找到 index.md 这个文件，打开后默认内容是这样的：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2019-04-22 14:22:08</span><br><span class="line">---</span><br></pre></td></tr></tbody></table></figure>
<p>添加 type: “tags” 到内容中，添加后是这样的：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2019-04-24 15:40:24</span><br><span class="line">type: tags</span><br><span class="line">---</span><br></pre></td></tr></tbody></table></figure>
<p>保存并关闭文件。</p>
<p>给文章添加 “tags” 属性，打开需要添加标签的文章，为其添加 tags 属性。</p>
<p>给文章添加 “tags” 属性，打开需要添加标签的文章，为其添加 tags 属性。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo 添加分类及标签</span><br><span class="line">date: 2019-04-24 15:40:24</span><br><span class="line">categories: 计算机</span><br><span class="line">tags:博客</span><br><span class="line">---</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>Github</tag>
        <tag>Hexo</tag>
        <tag>nexT</tag>
      </tags>
  </entry>
  <entry>
    <title>LibXL 直接读写 Excel 文件</title>
    <url>/2021/03/29/LibXL%E7%9B%B4%E6%8E%A5%E8%AF%BB%E5%86%99Excel%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>LibXL is a library for direct reading and writing Excel files.</p>
<p>Package contents:</p>
<p>  bin              32-bit dynamic library<br>  bin64            64-bit dynamic library<br>  doc              C++ documentation<br>  examples         C, C++, C#, Delphi and Fortran examples (MinGW, Visual Studio, Qt, Code::Blocks)<br>  include_c        headers for C<br>  include_cpp      headers for C++<br>  lib              32-bit import library for Microsoft Visual C++<br>  lib64            64-bit import library for Microsoft Visual C++<br>  net              .NET wrapper (assembly)<br>  php              compiled plug-in for PHP<br>  stdcall          32-bit dynamic library with stdcall calling convention<br>  changelog.txt    change log<br>  libxl.url        link to home page<br>  license.txt      end-user license agreement<br>  readme.txt       this file</p>
<p>Using library:</p>
<ol>
<li><p>Microsoft Visual C++</p>
<ul>
<li><p>add include directory in your project, for example: c:\libxl\include_cpp</p>
<p>Project -&gt; Properties -&gt; C/C++ -&gt; General -&gt; Additional Include Directories</p>
</li>
<li><p>add library directory in your project, for example: c:\libxl\lib</p>
<p>Project -&gt; Properties -&gt; Linker -&gt; General -&gt; Additional Library Directories</p>
</li>
<li><p>add libxl.lib in project dependencies:</p>
<p>Project -&gt; Properties -&gt; Linker -&gt; Input -&gt; Additional Dependencies</p>
</li>
<li><p>copy bin\libxl.dll to directory of your project</p>
</li>
</ul>
</li>
<li><p>MinGW</p>
<p>Type in examples/c++/mingw directory:</p>
<p>  g++ generate.cpp -o generate -I../../../include_cpp -L../../../bin -lxl</p>
<p>Use mingw32-make for building examples.</p>
</li>
</ol>
<ol start="3">
<li><p>C# and other .NET languages</p>
<p>Use assembly libxl.net.dll in net directory: Project -&gt; Add reference… -&gt; Browse</p>
<p>Also copy bin\libxl.dll to Debug or Release directory of your project.</p>
</li>
</ol>
<ol start="4">
<li><p>Qt</p>
<ul>
<li><p>add the following lines to a configuration file (.pro):</p>
<p>INCLUDEPATH = c:/libxl-3.6.4.0/include_cpp<br>LIBS += c:/libxl-3.6.4.0/lib/libxl.lib</p>
</li>
<li><p>copy bin\libxl.dll to the build directory of your project   </p>
</li>
</ul>
</li>
<li><p>Borland C++ and Embarcadero C++ Builder</p>
<ul>
<li><p>create an import library for your compiler:</p>
<p>  implib -a libxl.lib libxl.dll</p>
</li>
<li><p>add the include directory to your project, for example: c:\libxl-3.9.1.0\include_cpp</p>
<p>Project -&gt; Options -&gt; Building -&gt; C++ Compiler -&gt; Directories and Conditionals -&gt; Include file search path</p>
<p>or </p>
<p>Project -&gt; Options -&gt; Directories/Conditionals -&gt; Include path (for old C++ Bulder versions)</p>
</li>
<li><p>add library directory to your project (only for old C++ Builder versions)</p>
<p>Project -&gt; Options -&gt; Directories/Conditionals -&gt; Library path</p>
</li>
<li><p>add libxl.lib to your project</p>
<p>Project -&gt; Add to Project…</p>
</li>
<li><p>copy libxl.dll from the bin folder to <your_project_directory>/Win32/Debug or <your_project_directory>/Win32/Release folder</your_project_directory></your_project_directory></p>
<p>If your target is “Windows 64-bit” copy libxl.dll from the bin64 folder.</p>
</li>
</ul>
</li>
<li><p>Delphi</p>
<ul>
<li><p>add the directory with the LibXL.pas unit, for example: c:\libxl-3.9.1.0\examples\delphi12</p>
<p>Project -&gt; Options -&gt; Building -&gt; Delphi Compiler -&gt; Search path</p>
</li>
<li><p>copy libxl.dll from the bin folder to <your_project_directory>\Win32\Debug or <your_project_directory>\Win32\Release folder</your_project_directory></your_project_directory></p>
</li>
</ul>
</li>
</ol>
<p>Documentation:</p>
<p>  <a href="http://www.libxl.com/doc">http://www.libxl.com/doc</a></p>
<p>Contact:</p>
<p>  <a href="mailto:support@libxl.com">support@libxl.com</a></p>
]]></content>
      <categories>
        <category>三方库</category>
      </categories>
      <tags>
        <tag>Libxl</tag>
        <tag>Excel</tag>
        <tag>Delphi</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2021/03/31/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>已有项目添加到 Github</title>
    <url>/2021/04/14/%E5%B7%B2%E6%9C%89%E9%A1%B9%E7%9B%AE%E6%B7%BB%E5%8A%A0%E5%88%B0Github/</url>
    <content><![CDATA[<h1 id="一、建立好Git和Github环境"><a href="#一、建立好Git和Github环境" class="headerlink" title="一、建立好Git和Github环境"></a>一、建立好 Git 和 Github 环境</h1><p>参见 git 和 github 环境的有关文章</p>
<h1 id="二、初始化git"><a href="#二、初始化git" class="headerlink" title="二、初始化git"></a>二、初始化 git</h1><p>1. 项目目录下右键执行 git bash here，进入 shell</p>
<p>2. 修改 /etc/.gitconfig 或用户目录下的.gitconfig, 改为 main，设定默认分支为 main，原为 master</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[init]</span><br><span class="line">  defaultBranch = main</span><br></pre></td></tr></tbody></table></figure>
<p>3. 执行 git init，生成.git 隐藏的目录</p>
<p>4. 也可以创建并切换到 main 分支</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">git checkout -b main</span><br></pre></td></tr></tbody></table></figure>
<p> 亦可再 GithubDesktop 中添加本地库时初始化，默认分支位 main，在提交前需要设置本地仓库忽略</p>
<h1 id="三、本地仓库忽略"><a href="#三、本地仓库忽略" class="headerlink" title="三、本地仓库忽略"></a>三、本地仓库忽略</h1><p>本地仓库的文件忽略规则可以在 <code>.git/info/exclude</code> 文件中添加。对当前这个仓库下的所有文件起作用。这些忽略的文件不会提交到共享库中，因而不会被协作者所共享。规则如下:</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># git ls-files --others --exclude-from=.git/info/exclude</span></span><br><span class="line"><span class="comment"># Lines that start with '#' are comments.</span></span><br><span class="line"><span class="comment"># For a project mostly in C, the following would be a good set of</span></span><br><span class="line"><span class="comment"># exclude patterns (uncomment them if you want to use them):</span></span><br><span class="line"><span class="comment"># *.[oa]</span></span><br><span class="line"><span class="comment"># *~</span></span><br><span class="line">*.exe </span><br><span class="line">*.dll</span><br><span class="line">*.bak</span><br><span class="line">/_setup/_setup/_文本编辑工具/</span><br><span class="line">/_setup/_setup_Out/</span><br><span class="line">/_2020GKAutoRun/</span><br></pre></td></tr></tbody></table></figure>
<p>(更多规则可以参考 shell 的正则表达式)</p>
<h1 id="四、利用GithubDesktop添加和上传本地仓库"><a href="#四、利用GithubDesktop添加和上传本地仓库" class="headerlink" title="四、利用GithubDesktop添加和上传本地仓库"></a>四、利用 GithubDesktop 添加和上传本地仓库</h1><p><img data-src="https://i.loli.net/2021/04/14/xf3jBOqYpVPglI2.png" alt="image-20210414001259761"></p>
<p>只显示未被忽略的文件夹和文件类型</p>
<p>再 commit 和 publish 即可。</p>
]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>PicGo 安装 Gitee 图床</title>
    <url>/2021/04/15/PicGo%E5%AE%89%E8%A3%85Gitee%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<h1 id="下载gitee插件"><a href="#下载gitee插件" class="headerlink" title="下载gitee插件"></a>下载 gitee 插件</h1><p><img data-src="https://i.loli.net/2021/04/15/pBF4HX21CvShzuU.png" alt="image-20210415163125263"></p>
<p>●必须要先安装 node.js 才能安装插件，否则先安装 node.js，然后重启就行。</p>
<p>插件安装在 C:\Users\ 用户名 \AppData\Roaming\picgo\node_modules 下，npm 可查看，或删除之。</p>
<p>●插件删除</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/netxulei/typora_img/typora-pic/image-20210415184503902.png" alt="image-20210415184503902"></p>
<p>●关闭（或最小化）PicGo，再打开，多出 Gitee 图床</p>
<p><img data-src="https://i.loli.net/2021/04/15/uLpYiK4BmShdEFU.png" alt="image-20210415163226725"></p>
<h1 id="新建码云图床仓库gitee-com"><a href="#新建码云图床仓库gitee-com" class="headerlink" title="新建码云图床仓库gitee.com"></a>新建码云图床仓库 gitee.com</h1><p><img data-src="https://i.loli.net/2021/04/15/MgD8mw1htIN9vjx.png" alt="image-20210415165941893"></p>
<h1 id="设置私人令牌"><a href="#设置私人令牌" class="headerlink" title="设置私人令牌"></a>设置私人令牌</h1><p><img data-src="https://i.loli.net/2021/04/15/FaKTZ9GgYceC1dN.png" alt="image-20210415170145047"></p>
<p><img data-src="https://i.loli.net/2021/04/15/x4g7TS6LKIU9sio.png" alt="image-20210415170427111"></p>
<p><img data-src="https://i.loli.net/2021/04/15/1pUCGk6gv3bYf4n.png" alt="image-20210415170547646"></p>
<p><img data-src="https://i.loli.net/2021/04/15/lZzbkiUDCRhLt8J.png" alt="image-20210415170758431"></p>
<h1 id="Gitee图床设置"><a href="#Gitee图床设置" class="headerlink" title="Gitee图床设置"></a>Gitee 图床设置</h1><p><img data-src="https://cdn.jsdelivr.net/gh/netxulei/typora_img/typora-pic/image-20210415184004382.png" alt="image-20210415184004382"></p>
<p>GitHub 与 Gitee 仓库不同：Gitee 有一个仓库名，与路径不一定一致，Github 仓库名就是路径名。gitee 的 repo 必须路径名。</p>
]]></content>
      <categories>
        <category>PicGo</category>
      </categories>
      <tags>
        <tag>PicGo</tag>
        <tag>Gitee</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>一个项目同时提交到 GitHub 和 Gitee 两个仓库</title>
    <url>/2021/04/15/%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E5%90%8C%E6%97%B6%E6%8F%90%E4%BA%A4%E5%88%B0GitHub%E5%92%8CGitee%E4%B8%A4%E4%B8%AA%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h5 id="在-Gitee-新建仓库并关联克隆-GitHub仓库"><a href="#在-Gitee-新建仓库并关联克隆-GitHub仓库" class="headerlink" title="在 Gitee 新建仓库并关联克隆 GitHub仓库"></a>在 <code>Gitee</code> 新建仓库并关联克隆 <code>GitHub</code> 仓库</h5><p><img data-src="https://cdn.jsdelivr.net/gh/netxulei/typora_img/typora-pic/image-20210415193414023.png" alt="image-20210415193414023"></p>
<h5 id="修改-Git-的配置文件-git-config"><a href="#修改-Git-的配置文件-git-config" class="headerlink" title="修改 Git 的配置文件./git/config"></a>修改 <code>Git</code> 的配置文件./git/config</h5><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[core]</span><br><span class="line">  repositoryformatversion = 0</span><br><span class="line">  filemode = false</span><br><span class="line">  bare = false</span><br><span class="line">  logallrefupdates = true</span><br><span class="line">  symlinks = false</span><br><span class="line">  ignorecase = true</span><br><span class="line">[remote "origin"]</span><br><span class="line">  # github仓库地址</span><br><span class="line">  url = https://github.com/netxulei/hngk-git.git</span><br><span class="line">  # gitee仓库地址</span><br><span class="line">  url = https://gitee.com/netxulei/hngk-git.git</span><br><span class="line">  fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch "master"]</span><br><span class="line">  remote = origin</span><br><span class="line">  merge = refs/heads/master</span><br></pre></td></tr></tbody></table></figure>
<p>git remote -v 可查看配置</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin  https://github.com/netxulei/hngk-git.git (fetch)</span><br><span class="line">origin  https://github.com/netxulei/hngk-git.git (push)</span><br><span class="line">origin  https://gitee.com/netxulei/hngk-git.git (push)</span><br></pre></td></tr></tbody></table></figure>
<p>提交命令</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">git commit -m "注释"</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$ git push origin master</span><br><span class="line">Enumerating objects: 3, done.</span><br><span class="line">Counting objects: 100% (3/3), done.</span><br><span class="line">Delta compression using up to 6 threads</span><br><span class="line">Compressing objects: 100% (2/2), done.</span><br><span class="line">Writing objects: 100% (2/2), 229 bytes | 229.00 KiB/s, done.</span><br><span class="line">Total 2 (delta 1), reused 0 (delta 0), pack-reused 0</span><br><span class="line">remote: Resolving deltas: 100% (1/1), completed with 1 local object.</span><br><span class="line">To https://github.com/netxulei/hngk-git.git</span><br><span class="line">   46859bb..974d410  master -&gt; master</span><br><span class="line">Enumerating objects: 3, done.</span><br><span class="line">Counting objects: 100% (3/3), done.</span><br><span class="line">Delta compression using up to 6 threads</span><br><span class="line">Compressing objects: 100% (2/2), done.</span><br><span class="line">Writing objects: 100% (2/2), 229 bytes | 229.00 KiB/s, done.</span><br><span class="line">Total 2 (delta 1), reused 0 (delta 0), pack-reused 0</span><br><span class="line">remote: Powered by GITEE.COM [GNK-5.0]</span><br><span class="line">To https://gitee.com/netxulei/hngk-git.git</span><br><span class="line">   46859bb..974d410  master -&gt; master</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>github</category>
        <category>gitee</category>
      </categories>
      <tags>
        <tag>同时提交两个库</tag>
      </tags>
  </entry>
  <entry>
    <title>一个博客提交两个库</title>
    <url>/2021/04/15/%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2%E6%8F%90%E4%BA%A4%E4%B8%A4%E4%B8%AA%E5%BA%93/</url>
    <content><![CDATA[<p>修改博客目录下_config.yml 配置文件</p>
<p>注释一个库，提交另外的库</p>
<p>发布两次即可（hexo d）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">deploy: </span><br><span class="line"> type: git</span><br><span class="line"> repository: https://github.com/netxulei/netxulei.github.io.git</span><br><span class="line"> branch: main</span><br><span class="line"> # repo: https://gitee.com/netxulei/netxulei.git</span><br><span class="line"> # branch: master</span><br></pre></td></tr></tbody></table></figure>
<p>注意 gitee 的博客需要再 pages 服务力做一次更新</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>两个库</tag>
      </tags>
  </entry>
  <entry>
    <title>Jupyter NBextensions 插件</title>
    <url>/2021/04/16/JupyterNotebook%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a><strong>插件安装</strong></h1><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">pip install jupyter_contrib_nbextensions -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">jupyter contrib nbextension install --user</span><br><span class="line">pip install jupyter_nbextensions_configurator -i </span><br></pre></td></tr></tbody></table></figure>
<p>以上三步结束，重新启动 jupyter notebook 即可搞定，出现以下表示安装完毕。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/netxulei/typora_img/typora-pic/v2-2b32a8733f8d5fdd98134578a2716230_1440w.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>jupyter</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>jupyter</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>PyCharm 永久激活插件</title>
    <url>/2021/04/19/PyCharm%E6%B0%B8%E4%B9%85%E6%BF%80%E6%B4%BB%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p><strong>Windows、Mac、Linux 系统都适用</strong></p>
<p>插件是全自动无限激活一个月到期自动激活，无需每月找激活码找安装参数，适用最新 JetBrains 全家桶</p>
<p><strong>本插件可以离线激活</strong></p>
<p>通过自动无限重置 PyCharm 试用期的方法来达到永久激活；</p>
<p>收费插件的试用信息也会一并重置，试用期的 PyCharm 没有任何功能限制</p>
<p><strong>下载 PyCharm 永久激活插件</strong></p>
<p><strong>👇👇👇👇👇👇👇👇👇</strong></p>
<p><a href="https://pan.baidu.com/s/1U3ebBUz9RF8xzRA7TkE6Yw"><strong>点击下载 PyCharm 永久激活插件 2.1.9</strong></a></p>
<p>提取码：u4ry</p>
<p><a href="https://pan.baidu.com/s/1jaNrPBgrUu6Hc2LYQ7msmA"><strong>点击下载 PyCharm 永久激活插件 2.1.12 版</strong></a></p>
<p>提取码：2w6t</p>
<p><strong>安装 PyCharm 永久激活插件</strong></p>
<p>插件下载成功后拖动 ide-eval-resetter.zip 插件至 PyCharm 主界面中 如下图</p>
<p>(<strong>注意：如果右侧有打开的文件请关闭所有文件，然后再</strong>)</p>
<p><img data-src="https://uploader.shimo.im/f/X4Vgpieb7CDVybC3.png!thumbnail?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2MTg4MzQzNjMsImciOiJwWHdqd3dkWXlxSzg5cTlwIiwiaWF0IjoxNjE4ODMyNTYzLCJ1IjowfQ.otpP7dFZmTeaFW1Blrpk24olwDsbjFQmv--bog7Axn4" alt="img"></p>
<p>拖动 ide-eval-resetter.zip 插件至 PyCharm 主界面后，提示重启 PyCharm ，如下图</p>
<p>(<strong>注意：在最新的 2021 版 Pycharm 中不在提示重启，可直接在【Help】菜单中找到插件菜单</strong>)</p>
<p><img data-src="https://uploader.shimo.im/f/ywEcBceGRcIkIL97.png!thumbnail?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2MTg4MzQzNjMsImciOiJwWHdqd3dkWXlxSzg5cTlwIiwiaWF0IjoxNjE4ODMyNTYzLCJ1IjowfQ.otpP7dFZmTeaFW1Blrpk24olwDsbjFQmv--bog7Axn4" alt="img"></p>
<p>PyCharm 重启完成并进入 PyCharm 主界面，点击菜单【Help】-&gt;【Eval Reset】如下图</p>
<p><img data-src="https://uploader.shimo.im/f/0OuEIzAfXHcypYXf.png!thumbnail?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2MTg4MzQzNjMsImciOiJwWHdqd3dkWXlxSzg5cTlwIiwiaWF0IjoxNjE4ODMyNTYzLCJ1IjowfQ.otpP7dFZmTeaFW1Blrpk24olwDsbjFQmv--bog7Axn4" alt="img"></p>
<p>点击菜单【Help】-&gt;【Eval Reset】后会弹出插件主界面 ，插件主要功能介绍如下</p>
<ul>
<li><p>按钮【Reload】刷新界面上的显示信息。</p>
</li>
<li><p>按钮【Reset】点击后会询问是否重置试用信息并重启 IDE。选择 Yes 则执行重置操作并重启 IDE 生效，选择 No 则什么也不做。（此为手动重置方式）</p>
</li>
<li><p>勾选项【Auto reset before per restart 】如果勾选了，则自勾选后每次重启 / 退出 IDE 时会自动重置试用信息，你无需做额外的事情。（此为自动重置方式）；如果不勾选的话每次 PyCharm 试用期到期后需要手动点击【Reset】按钮</p>
</li>
</ul>
<p><img data-src="https://uploader.shimo.im/f/jLZ9b7r1q9TyvTl5.png!thumbnail?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2MTg4MzQzNjMsImciOiJwWHdqd3dkWXlxSzg5cTlwIiwiaWF0IjoxNjE4ODMyNTYzLCJ1IjowfQ.otpP7dFZmTeaFW1Blrpk24olwDsbjFQmv--bog7Axn4" alt="img"></p>
<p>勾选【Auto reset before per restart 】并点击按钮【Reset】然后系统自动重启 PyCharm</p>
<p><img data-src="https://uploader.shimo.im/f/0koVC8W6WdPayrZ6.png!thumbnail?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2MTg4MzQzNjMsImciOiJwWHdqd3dkWXlxSzg5cTlwIiwiaWF0IjoxNjE4ODMyNTYzLCJ1IjowfQ.otpP7dFZmTeaFW1Blrpk24olwDsbjFQmv--bog7Axn4" alt="img"></p>
<p>重启完成后点击菜单【Help】-&gt;【About】查看是否续命成功如下图</p>
<p><img data-src="https://uploader.shimo.im/f/iKT0B6JcTz7TdxZz.png!thumbnail?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2MTg4MzQzNjMsImciOiJwWHdqd3dkWXlxSzg5cTlwIiwiaWF0IjoxNjE4ODMyNTYzLCJ1IjowfQ.otpP7dFZmTeaFW1Blrpk24olwDsbjFQmv--bog7Axn4" alt="img"></p>
]]></content>
  </entry>
  <entry>
    <title>Python 的 Django 框架小白初步（pycharm 下）</title>
    <url>/2021/04/19/Python%E7%9A%84Django%E6%A1%86%E6%9E%B6%E5%B0%8F%E7%99%BD%E5%88%9D%E6%AD%A5%EF%BC%88pycharm%E4%B8%8B%EF%BC%89/</url>
    <content><![CDATA[<p>安装 pycharm</p>
<p>新建 pycharm 的 django 工程（企业版）</p>
<p>社区办要手工创建</p>
<p>查看效果</p>
<p>pycharm 终端</p>
<p>python manage.py runserver</p>
<p>127.0.0.1:8000</p>
<p>进入后台管理</p>
<p>127.0.0.1:8000/admin</p>
<p>迁移？</p>
<p>python manage.py migrate</p>
<p>建立超级用户 </p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">(venv) D:\MyPycharm\DjangoTest&gt;python manage.py createsuperuser</span><br><span class="line">用户名 (leave blank to use 'lenovo'): netxulei</span><br><span class="line">电子邮件地址: netxulei@outlook.com</span><br><span class="line">Password:</span><br><span class="line">Password (again):</span><br><span class="line">Superuser created successfully.</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>python 的 pip 国内镜像</title>
    <url>/2021/04/16/python%E7%9A%84pip%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<p><a href="https://mirrors.tuna.tsinghua.edu.cn/">清华大学开源软件镜像站</a></p>
<p>pypi 镜像每 5 分钟同步一次。</p>
<h1 id="临时使用"><a href="#临时使用" class="headerlink" title="临时使用"></a>临时使用</h1><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package</span><br></pre></td></tr></tbody></table></figure>
<p>注意，<code>simple</code> 不能少，是 <code>https</code> 而不是 <code>http</code></p>
<h1 id="设为默认"><a href="#设为默认" class="headerlink" title="设为默认"></a>设为默认</h1><p>升级 pip 到最新的版本 (&gt;=10.0.0) 后进行配置：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">pip install pip -U</span><br><span class="line">pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></tbody></table></figure>
<p>如果您到 pip 默认源的网络连接较差，临时使用本镜像站来升级 pip：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>镜像</tag>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title>python 库随记</title>
    <url>/2021/04/21/python%E5%BA%93%E9%9A%8F%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="requests库"><a href="#requests库" class="headerlink" title="requests库"></a>requests 库</h1><h2 id="get-请求"><a href="#get-请求" class="headerlink" title="get 请求"></a>get 请求</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">r = requests.get(<span class="string">"https://unsplash.com"</span>)</span><br></pre></td></tr></tbody></table></figure>

<p>向网站发送了一个 get 请求，然后网站会返回一个 response。r 就是 response。可以在运行的时候查看 r 的 type。</p>
<ul>
<li>get 传递参数请求 </li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">payload = {<span class="string">'key1'</span>: <span class="string">'value1'</span>, <span class="string">'key2'</span>: <span class="string">'value2'</span>}</span><br><span class="line">r = requests.get(<span class="string">"http://httpbin.org/get"</span>, params=payload)</span><br></pre></td></tr></tbody></table></figure>
<p>向服务器发送的请求中包含了两个参数 key1 和 key2，以及两个参数的值。实际上它构造成了如下网址：<br><code>http://httpbin.org/get?key1=value1&amp;key2=value2</code></p>
<h4 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST 请求</h4><ul>
<li>无参数 post 请求：</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">r = requests.post(<span class="string">"http://httpbin.org/post"</span>)</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>有参数 post 请求：</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">payload = {<span class="string">'key1'</span>: <span class="string">'value1'</span>, <span class="string">'key2'</span>: <span class="string">'value2'</span>}</span><br><span class="line">r = requests.post(<span class="string">"http://httpbin.org/post"</span>, data=payload)</span><br></pre></td></tr></tbody></table></figure>
<p>post 请求多用来提交表单数据，即填写一堆输入框，然后提交。</p>
<h2 id="其他请求"><a href="#其他请求" class="headerlink" title="其他请求"></a>其他请求</h2><p>平时用的不多，可以看官网文档。阅读官方文档是必备技能！</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">r = requests.put(<span class="string">"http://httpbin.org/put"</span>)</span><br><span class="line">r = requests.delete(<span class="string">"http://httpbin.org/delete"</span>)</span><br><span class="line">r = requests.head(<span class="string">"http://httpbin.org/get"</span>)</span><br><span class="line">r = requests.options(<span class="string">"http://httpbin.org/get"</span>)</span><br></pre></td></tr></tbody></table></figure>
<h1 id="BeautifulSoup-库"><a href="#BeautifulSoup-库" class="headerlink" title="BeautifulSoup 库"></a>BeautifulSoup 库</h1><p><strong>可另外安装 lxml</strong>，BeautifulSoup 对文档进行解析。使用 lxml 比 Python 内置解析器速度快。</p>
<h2 id="BeautifulSoup对象类型"><a href="#BeautifulSoup对象类型" class="headerlink" title="BeautifulSoup对象类型"></a>BeautifulSoup 对象类型</h2><p>Beautiful Soup 将复杂 HTML 文档转换成一个复杂的树形结构，每个节点都是 Python 对象。所有对象可以归纳为 4 种类型: Tag , NavigableString , BeautifulSoup , Comment 。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A(BeautifulSoup )--&gt;|"find = soup.find('p')"|B[Tag]</span><br><span class="line">B--"find.name"--&gt; C("class 'str'")</span><br><span class="line">B--"find['class']"--&gt;D(class 'list')</span><br><span class="line">B--"find.string"--&gt;E(class 'bs4.element.NavigableString')</span><br><span class="line">B--"find.string"--&gt;F(class 'bs4.element.Comment')</span><br></pre></td></tr></tbody></table></figure>
<h3 id="BeautifulSoup对象"><a href="#BeautifulSoup对象" class="headerlink" title="BeautifulSoup对象"></a>BeautifulSoup 对象</h3><p>BeautifulSoup 对象表示一个文档的全部内容。支持遍历文档树和搜索文档树。 </p>
<ul>
<li>html_doc 为字符串 </li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">html_doc = <span class="string">"""</span></span><br><span class="line"><span class="string">字符串内容</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">soup = BeautifulSoup(html_doc, <span class="string">'lxml'</span>)  <span class="comment"># BeautifulSoup使用lxml解析</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">html_doc = <span class="string">"""</span></span><br><span class="line"><span class="string">字符串</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">soup = BeautifulSoup(html_doc, <span class="string">'html.parser'</span>)  <span class="comment"># BeautifulSoup使用python内部解析</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>htmlfile 为 open 的文件 </li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'result.html'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> htmlfile:</span><br><span class="line">    soup = BeautifulSoup(htmlfile, <span class="string">'html.parser'</span>)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Tag对象"><a href="#Tag对象" class="headerlink" title="Tag对象"></a>Tag 对象</h3><ul>
<li>find () 方法返回返回标签</li>
</ul>
<p>这个就跟 HTML 或者 XML（还能解析 XML？是的，能！）中的标签是一样的。我们使用 find () 方法返回的类型就是这个（插一句：使用 find-all () 返回的是多个该对象的集合，是可以用 for 循环遍历的。）。返回标签之后，还可以对提取标签中的信息。</p>
<ul>
<li> 使用 find 方法查到第一个 p 标签：&lt;class ‘bs4.element.Tag’&gt;</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">find = soup.find(<span class="string">'p'</span>)</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>提取标签的名字：&lt;class ‘str’&gt;</li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">find.name</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>提取标签的属性：&lt;class ‘list’&gt;</li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">find['attribute']</span><br></pre></td></tr></tbody></table></figure>
<h3 id="NavigableString对象"><a href="#NavigableString对象" class="headerlink" title="NavigableString对象"></a>NavigableString 对象</h3><ul>
<li>提取标签的内容（不包含标签）：&lt;class ‘bs4.element.NavigableString’&gt; 或 &lt; class ‘bs4.element.Comment’&gt;，若返回 &lt; class ‘bs4.element.Comment’&gt;，则为注释 </li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">find.string</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>例子：</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html_doc = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class="title"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">soup = BeautifulSoup(html_doc, <span class="string">'lxml'</span>)  <span class="comment">#声明BeautifulSoup对象</span></span><br><span class="line">find = soup.find(<span class="string">'p'</span>)  <span class="comment">#使用find方法查到第一个p标签</span></span><br><span class="line">print(<span class="string">"find's return type is "</span>, <span class="built_in">type</span>(find))  <span class="comment">#输出返回值类型</span></span><br><span class="line">print(<span class="string">"find's content is"</span>, find)  <span class="comment">#输出find获取的值</span></span><br><span class="line">print(<span class="string">"find's Tag Name is "</span>, find.name)  <span class="comment">#输出标签的名字</span></span><br><span class="line">print(<span class="string">"find's Attribute(class) is "</span>, find[<span class="string">'class'</span>])  <span class="comment">#输出标签的class属性值</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="Comment对象"><a href="#Comment对象" class="headerlink" title="Comment对象"></a>Comment 对象</h3><p>这个对象其实就是 HTML 和 XML 中的注释。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">markup = <span class="string">"&lt;b&gt;&lt;!--Hey, buddy. Want to buy a used parser?--&gt;&lt;/b&gt;"</span></span><br><span class="line">soup = BeautifulSoup(markup, <span class="string">'lxml'</span>)</span><br><span class="line">comment = soup.b.string</span><br><span class="line"><span class="built_in">type</span>(comment)</span><br><span class="line"><span class="comment"># &lt;class 'bs4.element.Comment'&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>有些时候，并不想获取 HTML 中的注释内容，所以用这个类型来判断是否是注释。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">type</span>(SomeString) == bs4.element.Comment:</span><br><span class="line">    print(<span class="string">'该字符是注释'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'该字符不是注释'</span>)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="其他语法"><a href="#其他语法" class="headerlink" title="其他语法"></a>其他语法</h3><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">soup.head  #查找第一个head标签,相当于soup.find('head')</span><br><span class="line">soup.p  #查找第一个p标签，相当于soup.find('p')</span><br><span class="line">soup.b  #查找b标签,相当于soup.find('b')</span><br></pre></td></tr></tbody></table></figure>
<h2 id="BeautifulSoup遍历方法"><a href="#BeautifulSoup遍历方法" class="headerlink" title="BeautifulSoup遍历方法"></a>BeautifulSoup 遍历方法</h2><h3 id="节点和标签名"><a href="#节点和标签名" class="headerlink" title="节点和标签名"></a>节点和标签名</h3><p>可以使用子节点、父节点、 及标签名的方式遍历：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">soup.head <span class="comment">#查找head标签</span></span><br><span class="line">soup.p <span class="comment">#查找第一个p标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#对标签的直接子节点进行循环</span></span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> title_tag.children:</span><br><span class="line">    print(child)</span><br><span class="line"></span><br><span class="line">soup.parent <span class="comment">#父节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有父节点</span></span><br><span class="line"><span class="keyword">for</span> parent <span class="keyword">in</span> link.parents:</span><br><span class="line">    <span class="keyword">if</span> parent <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        print(parent)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(parent.name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 兄弟节点</span></span><br><span class="line">sibling_soup.b.next_sibling <span class="comment">#后面的兄弟节点</span></span><br><span class="line">sibling_soup.c.previous_sibling <span class="comment">#前面的兄弟节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#所有兄弟节点</span></span><br><span class="line"><span class="keyword">for</span> sibling <span class="keyword">in</span> soup.a.next_siblings:</span><br><span class="line">    print(<span class="built_in">repr</span>(sibling))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> sibling <span class="keyword">in</span> soup.find(<span class="built_in">id</span>=<span class="string">"link3"</span>).previous_siblings:</span><br><span class="line">    print(<span class="built_in">repr</span>(sibling))</span><br></pre></td></tr></tbody></table></figure>
<h3 id="搜索文档树"><a href="#搜索文档树" class="headerlink" title="搜索文档树"></a>搜索文档树</h3><p>主要 find () 和 find_all () 啦，当然还有其他的。比如 find_parent () 和 find_parents ()、 find_next_sibling () 和 find_next_siblings () 、find_all_next () 和 find_next ()、find_all_previous () 和 find_previous () 等等</p>
<ul>
<li><p>find_all()<br>搜索当前 tag 的所有 tag 子节点，并判断是否符合过滤器的条件。返回值类型是 <strong>bs4.element.ResultSet</strong>。<br>完整的语法：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">find_all( name , attrs , recursive , string , **kwargs )</span><br></pre></td></tr></tbody></table></figure>
<p>例：</p>
</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">soup.find_all(<span class="string">"title"</span>)</span><br><span class="line"><span class="comment"># [&lt;title&gt;The Dormouse's story&lt;/title&gt;]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">soup.find_all(<span class="string">"p"</span>, <span class="string">"title"</span>)</span><br><span class="line"><span class="comment"># [&lt;p class="title"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;]</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">soup.find_all(<span class="string">"a"</span>)</span><br><span class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="comment">#  &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;,</span></span><br><span class="line"><span class="comment">#  &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">soup.find_all(<span class="built_in">id</span>=<span class="string">"link2"</span>)</span><br><span class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">soup.find(string=re.<span class="built_in">compile</span>(<span class="string">"sisters"</span>))</span><br><span class="line"><span class="comment"># u'Once upon a time there were three little sisters; and their names were\n'</span></span><br></pre></td></tr></tbody></table></figure>
<p>name 参数：可以查找所有名字为 name 的 tag。<br>attr 参数：就是 tag 里的属性。<br>string 参数：搜索文档中字符串的内容。<br>recursive 参数： 调用 tag 的 find_all () 方法时，Beautiful Soup 会检索当前 tag 的所有子孙节点。如果只想搜索 tag 的直接子节点，可以使用参数 recursive=False 。</p>
<ul>
<li>find()<br>与 find_all () 类似，只不过只返回找到的第一个值。返回值类型是 bs4.element.Tag。<br>完整语法：<br><code>find( name , attrs , recursive , string , **kwargs )</code><br>看例子：</li>
</ul>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">soup.find('title')</span><br><span class="line"># &lt;title&gt;The Dormouse's story&lt;/title&gt;</span><br><span class="line">#</span><br><span class="line">soup.find("head").find("title")</span><br><span class="line"># &lt;title&gt;The Dormouse's story&lt;/title&gt;</span><br></pre></td></tr></tbody></table></figure>
<h2 id="BeautifulSoup参数调用方法"><a href="#BeautifulSoup参数调用方法" class="headerlink" title="BeautifulSoup参数调用方法"></a>BeautifulSoup 参数调用方法</h2><h4 id="find-和find-all-："><a href="#find-和find-all-：" class="headerlink" title="find()和find_all()："></a>find () 和 find_all ()：</h4><p><strong>find ()** 只返回第一个匹配到的对象，</strong>find_all ()** 返回所有匹配到的结果，语法一样，相当于 limit=1</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">find(name, attrs, recursive, text, **wargs)　　</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">find_all(name, attrs, recursive, text, limit, **kwargs)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h4><p>这些参数相当于过滤器一样可以进行筛选处理。不同的参数过滤可以应用到以下情况：</p>
<ul>
<li>查找标签，基于 name 参数</li>
<li>查找文本，基于 text 参数，可以使正则表达式</li>
<li>查找标签的属性，基于 attrs 参数</li>
<li>基于函数的查找</li>
<li>如下参数可组合查找，并且的关系？</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td> name</td>
<td> 基于 name 参数</td>
</tr>
<tr>
<td> text</td>
<td> 基于 text 参数，文本或正则表达式</td>
</tr>
<tr>
<td> attrs</td>
<td> 基于 attrs 参数</td>
</tr>
<tr>
<td> recursive</td>
<td> 递归的，循环的，true 或 false</td>
</tr>
<tr>
<td>limit</td>
<td>find_all () 显示结果范围</td>
</tr>
<tr>
<td>函数</td>
<td>必须返回</td>
</tr>
</tbody></table>
<p>调用方法（class_是特殊属性，替换 class 属性）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"># 直接按规则输入条件</span><br><span class="line">li_quick = soup.find_all('li', {'class': 'item-1'})</span><br><span class="line"># 加上对象名称</span><br><span class="line">li_quick = soup.find_all(name='li', attrs={'class': 'item-1'})</span><br><span class="line"># 可综合使用</span><br><span class="line">li_quick = soup.find_all('li', attrs={'class': 'item-1'})</span><br><span class="line"># class属性查找</span><br><span class="line">beautifulsoup_class_ = soup.find_all(class_='item-1')</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>库</tag>
      </tags>
  </entry>
  <entry>
    <title>解析 python 爬虫 puklaw4pbc</title>
    <url>/2021/04/19/%E8%A7%A3%E6%9E%90python%E7%88%AC%E8%99%ABpuklaw4pbc/</url>
    <content><![CDATA[<p>spider.py</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">from bs4 import BeautifulSou</span><br></pre></td></tr></tbody></table></figure>
<p>Beautiful Soup 是一个可以从 HTML 或 XML 文件中提取数据的 Python 库，简单来说，它能将 HTML 的标签文件解析成树形结构，然后方便地获取到指定标签的对应属性。</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">from configparser import ConfigParser</span><br><span class="line">import pandas as pd</span><br><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">from sqlalchemy import create_engine</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
        <tag>pkulaw</tag>
      </tags>
  </entry>
</search>
